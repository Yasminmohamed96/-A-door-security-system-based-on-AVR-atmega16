
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000029f2  00002a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800094  00800094  00002aba  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b4  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000720c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__vector_6>
      1c:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__vector_7>
      20:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 09 	call	0x1324	; 0x1324 <main>
      8a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <store_password>:
uint8 tick=0;

uint8 g_flag=0;
uint8 g_flag_motor=0;
void store_password (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 password1[7];

	uint8 i;
	while ((UART_recieveByte ()) != M2_READY);
     b5a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
     b5e:	80 31       	cpi	r24, 0x10	; 16
     b60:	e1 f7       	brne	.-8      	; 0xb5a <store_password+0x14>
	UART_receiveString (password1);
     b62:	ce 01       	movw	r24, r28
     b64:	40 96       	adiw	r24, 0x10	; 16
     b66:	0e 94 2f 14 	call	0x285e	; 0x285e <UART_receiveString>
	g_saveflag=UART_recieveByte ();
     b6a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
     b6e:	80 93 95 00 	sts	0x0095, r24
	for ( i=0 ; i<7 ; i++)
     b72:	1f 86       	std	Y+15, r1	; 0x0f
     b74:	85 c0       	rjmp	.+266    	; 0xc80 <store_password+0x13a>
		{
		   EEPROM_writeByte (i,password1[i]);
     b76:	8f 85       	ldd	r24, Y+15	; 0x0f
     b78:	48 2f       	mov	r20, r24
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	ce 01       	movw	r24, r28
     b84:	40 96       	adiw	r24, 0x10	; 16
     b86:	fc 01       	movw	r30, r24
     b88:	e2 0f       	add	r30, r18
     b8a:	f3 1f       	adc	r31, r19
     b8c:	20 81       	ld	r18, Z
     b8e:	ca 01       	movw	r24, r20
     b90:	62 2f       	mov	r22, r18
     b92:	0e 94 34 0a 	call	0x1468	; 0x1468 <EEPROM_writeByte>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 ea       	ldi	r26, 0xA0	; 160
     b9c:	b2 e4       	ldi	r27, 0x42	; 66
     b9e:	8b 87       	std	Y+11, r24	; 0x0b
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	ad 87       	std	Y+13, r26	; 0x0d
     ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a e7       	ldi	r20, 0x7A	; 122
     bb4:	53 e4       	ldi	r21, 0x43	; 67
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8f 83       	std	Y+7, r24	; 0x07
     bc0:	98 87       	std	Y+8, r25	; 0x08
     bc2:	a9 87       	std	Y+9, r26	; 0x09
     bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	78 85       	ldd	r23, Y+8	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <store_password+0xa2>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <store_password+0x120>
	else if (__tmp > 65535)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <store_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6b 85       	ldd	r22, Y+11	; 0x0b
     c02:	7c 85       	ldd	r23, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <store_password+0x102>
     c2a:	89 e1       	ldi	r24, 0x19	; 25
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <store_password+0xf0>
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <store_password+0xe4>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <store_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <store_password+0x12c>
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01

	uint8 i;
	while ((UART_recieveByte ()) != M2_READY);
	UART_receiveString (password1);
	g_saveflag=UART_recieveByte ();
	for ( i=0 ; i<7 ; i++)
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	8f 87       	std	Y+15, r24	; 0x0f
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	87 30       	cpi	r24, 0x07	; 7
     c84:	08 f4       	brcc	.+2      	; 0xc88 <store_password+0x142>
     c86:	77 cf       	rjmp	.-274    	; 0xb76 <store_password+0x30>
		{
		   EEPROM_writeByte (i,password1[i]);
		    _delay_ms (80);
		}
	}
     c88:	66 96       	adiw	r28, 0x16	; 22
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <operation>:
uint8 operation (void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	return ((UART_recieveByte ()));
     ca2:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <if_savedPassword_matched>:

uint8 if_savedPassword_matched (void)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	6e 97       	sbiw	r28, 0x1e	; 30
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	uint8 password[7];
	uint8 savedPassword[7];
	while ((UART_recieveByte ()) != M2_READY);
     cc0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
     cc4:	80 31       	cpi	r24, 0x10	; 16
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <if_savedPassword_matched+0x14>
	UART_receiveString (password);
     cc8:	ce 01       	movw	r24, r28
     cca:	40 96       	adiw	r24, 0x10	; 16
     ccc:	0e 94 2f 14 	call	0x285e	; 0x285e <UART_receiveString>


	for(i=0 ; i<5 ; i++)
     cd0:	1f 86       	std	Y+15, r1	; 0x0f
     cd2:	84 c0       	rjmp	.+264    	; 0xddc <if_savedPassword_matched+0x130>
    {
     	EEPROM_readByte(i,&savedPassword[i]);
     cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd6:	48 2f       	mov	r20, r24
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	8f 85       	ldd	r24, Y+15	; 0x0f
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9e 01       	movw	r18, r28
     ce2:	29 5e       	subi	r18, 0xE9	; 233
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	28 0f       	add	r18, r24
     ce8:	39 1f       	adc	r19, r25
     cea:	ca 01       	movw	r24, r20
     cec:	b9 01       	movw	r22, r18
     cee:	0e 94 75 0a 	call	0x14ea	; 0x14ea <EEPROM_readByte>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 ea       	ldi	r26, 0xA0	; 160
     cf8:	b2 e4       	ldi	r27, 0x42	; 66
     cfa:	8b 87       	std	Y+11, r24	; 0x0b
     cfc:	9c 87       	std	Y+12, r25	; 0x0c
     cfe:	ad 87       	std	Y+13, r26	; 0x0d
     d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d02:	6b 85       	ldd	r22, Y+11	; 0x0b
     d04:	7c 85       	ldd	r23, Y+12	; 0x0c
     d06:	8d 85       	ldd	r24, Y+13	; 0x0d
     d08:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4a e7       	ldi	r20, 0x7A	; 122
     d10:	53 e4       	ldi	r21, 0x43	; 67
     d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	8f 83       	std	Y+7, r24	; 0x07
     d1c:	98 87       	std	Y+8, r25	; 0x08
     d1e:	a9 87       	std	Y+9, r26	; 0x09
     d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d22:	6f 81       	ldd	r22, Y+7	; 0x07
     d24:	78 85       	ldd	r23, Y+8	; 0x08
     d26:	89 85       	ldd	r24, Y+9	; 0x09
     d28:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	2c f4       	brge	.+10     	; 0xd44 <if_savedPassword_matched+0x98>
		__ticks = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	3f c0       	rjmp	.+126    	; 0xdc2 <if_savedPassword_matched+0x116>
	else if (__tmp > 65535)
     d44:	6f 81       	ldd	r22, Y+7	; 0x07
     d46:	78 85       	ldd	r23, Y+8	; 0x08
     d48:	89 85       	ldd	r24, Y+9	; 0x09
     d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	3f ef       	ldi	r19, 0xFF	; 255
     d50:	4f e7       	ldi	r20, 0x7F	; 127
     d52:	57 e4       	ldi	r21, 0x47	; 71
     d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d58:	18 16       	cp	r1, r24
     d5a:	4c f5       	brge	.+82     	; 0xdae <if_savedPassword_matched+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d60:	8d 85       	ldd	r24, Y+13	; 0x0d
     d62:	9e 85       	ldd	r25, Y+14	; 0x0e
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e2       	ldi	r20, 0x20	; 32
     d6a:	51 e4       	ldi	r21, 0x41	; 65
     d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	bc 01       	movw	r22, r24
     d76:	cd 01       	movw	r24, r26
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <if_savedPassword_matched+0xf8>
     d86:	89 e1       	ldi	r24, 0x19	; 25
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9c 83       	std	Y+4, r25	; 0x04
     d8c:	8b 83       	std	Y+3, r24	; 0x03
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <if_savedPassword_matched+0xe6>
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	69 f7       	brne	.-38     	; 0xd86 <if_savedPassword_matched+0xda>
     dac:	14 c0       	rjmp	.+40     	; 0xdd6 <if_savedPassword_matched+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dae:	6f 81       	ldd	r22, Y+7	; 0x07
     db0:	78 85       	ldd	r23, Y+8	; 0x08
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	9a 85       	ldd	r25, Y+10	; 0x0a
     db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <if_savedPassword_matched+0x122>
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
	uint8 savedPassword[7];
	while ((UART_recieveByte ()) != M2_READY);
	UART_receiveString (password);


	for(i=0 ; i<5 ; i++)
     dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	8f 87       	std	Y+15, r24	; 0x0f
     ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dde:	85 30       	cpi	r24, 0x05	; 5
     de0:	08 f4       	brcc	.+2      	; 0xde4 <if_savedPassword_matched+0x138>
     de2:	78 cf       	rjmp	.-272    	; 0xcd4 <if_savedPassword_matched+0x28>
    {
     	EEPROM_readByte(i,&savedPassword[i]);
     	_delay_ms(80);
    }
	savedPassword[i] = '\0';
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	ce 01       	movw	r24, r28
     dec:	47 96       	adiw	r24, 0x17	; 23
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	10 82       	st	Z, r1

	if ((strcmp (password,savedPassword)) == 0)
     df6:	ce 01       	movw	r24, r28
     df8:	40 96       	adiw	r24, 0x10	; 16
     dfa:	9e 01       	movw	r18, r28
     dfc:	29 5e       	subi	r18, 0xE9	; 233
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 a9 14 	call	0x2952	; 0x2952 <strcmp>
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f4       	brne	.+20     	; 0xe1e <if_savedPassword_matched+0x172>
		{

			while ((UART_recieveByte ()) != M2_READY);
     e0a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
     e0e:	80 31       	cpi	r24, 0x10	; 16
     e10:	e1 f7       	brne	.-8      	; 0xe0a <if_savedPassword_matched+0x15e>
			//UART_sendByte (M2_READY);
			UART_sendByte (true);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <UART_sendByte>
			return true;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	8e 8f       	std	Y+30, r24	; 0x1e
     e1c:	0c c0       	rjmp	.+24     	; 0xe36 <if_savedPassword_matched+0x18a>
		}
	else
	{
		LCD_intgerToString(10);
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
		while ((UART_recieveByte ()) != M2_READY);
     e26:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
     e2a:	80 31       	cpi	r24, 0x10	; 16
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <if_savedPassword_matched+0x17a>
		//UART_sendByte (M2_READY);
		UART_sendByte (false);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <UART_sendByte>
		return false;
     e34:	1e 8e       	std	Y+30, r1	; 0x1e
     e36:	8e 8d       	ldd	r24, Y+30	; 0x1e
	}
}
     e38:	6e 96       	adiw	r28, 0x1e	; 30
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <openDoor>:
	CLEAR_BIT(PORTC,PC2);
	SET_BIT(PORTC,PC3);}
*/

void openDoor(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	6c 97       	sbiw	r28, 0x1c	; 28
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61

	/* configure pin PC0 and PC1 as output pins*/

	SET_BIT(DDRC,PC2);
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC3);
     e6c:	a4 e3       	ldi	r26, 0x34	; 52
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e4 e3       	ldi	r30, 0x34	; 52
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC4);
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 61       	ori	r24, 0x10	; 16
     e86:	8c 93       	st	X, r24
	SET_BIT(PORTC,PC4);
     e88:	a5 e3       	ldi	r26, 0x35	; 53
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e5 e3       	ldi	r30, 0x35	; 53
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	8c 93       	st	X, r24
	/* Rotate the motor --> clock wise*/
	CLEAR_BIT(PORTC,PC2);
     e96:	a5 e3       	ldi	r26, 0x35	; 53
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e5 e3       	ldi	r30, 0x35	; 53
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8b 7f       	andi	r24, 0xFB	; 251
     ea2:	8c 93       	st	X, r24
	SET_BIT(PORTC,PC3);
     ea4:	a5 e3       	ldi	r26, 0x35	; 53
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e5 e3       	ldi	r30, 0x35	; 53
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	8c 93       	st	X, r24
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	96 e9       	ldi	r25, 0x96	; 150
     eb6:	a8 e1       	ldi	r26, 0x18	; 24
     eb8:	bb e4       	ldi	r27, 0x4B	; 75
     eba:	89 8f       	std	Y+25, r24	; 0x19
     ebc:	9a 8f       	std	Y+26, r25	; 0x1a
     ebe:	ab 8f       	std	Y+27, r26	; 0x1b
     ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec2:	69 8d       	ldd	r22, Y+25	; 0x19
     ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a e7       	ldi	r20, 0x7A	; 122
     ed0:	53 e4       	ldi	r21, 0x43	; 67
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8d 8b       	std	Y+21, r24	; 0x15
     edc:	9e 8b       	std	Y+22, r25	; 0x16
     ede:	af 8b       	std	Y+23, r26	; 0x17
     ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	2c f4       	brge	.+10     	; 0xf04 <openDoor+0xba>
		__ticks = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9c 8b       	std	Y+20, r25	; 0x14
     f00:	8b 8b       	std	Y+19, r24	; 0x13
     f02:	3f c0       	rjmp	.+126    	; 0xf82 <openDoor+0x138>
	else if (__tmp > 65535)
     f04:	6d 89       	ldd	r22, Y+21	; 0x15
     f06:	7e 89       	ldd	r23, Y+22	; 0x16
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	98 8d       	ldd	r25, Y+24	; 0x18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	4c f5       	brge	.+82     	; 0xf6e <openDoor+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1c:	69 8d       	ldd	r22, Y+25	; 0x19
     f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <openDoor+0x11a>
     f46:	89 e1       	ldi	r24, 0x19	; 25
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9a 8b       	std	Y+18, r25	; 0x12
     f4c:	89 8b       	std	Y+17, r24	; 0x11
     f4e:	89 89       	ldd	r24, Y+17	; 0x11
     f50:	9a 89       	ldd	r25, Y+18	; 0x12
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <openDoor+0x108>
     f56:	9a 8b       	std	Y+18, r25	; 0x12
     f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9c 8b       	std	Y+20, r25	; 0x14
     f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f64:	8b 89       	ldd	r24, Y+19	; 0x13
     f66:	9c 89       	ldd	r25, Y+20	; 0x14
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f7       	brne	.-38     	; 0xf46 <openDoor+0xfc>
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <openDoor+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9c 8b       	std	Y+20, r25	; 0x14
     f80:	8b 8b       	std	Y+19, r24	; 0x13
     f82:	8b 89       	ldd	r24, Y+19	; 0x13
     f84:	9c 89       	ldd	r25, Y+20	; 0x14
     f86:	98 8b       	std	Y+16, r25	; 0x10
     f88:	8f 87       	std	Y+15, r24	; 0x0f
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	98 89       	ldd	r25, Y+16	; 0x10
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <openDoor+0x144>
     f92:	98 8b       	std	Y+16, r25	; 0x10
     f94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10000000);
	TOGGLE_BIT(PORTC,PC2);
     f96:	a5 e3       	ldi	r26, 0x35	; 53
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	90 81       	ld	r25, Z
     fa0:	84 e0       	ldi	r24, 0x04	; 4
     fa2:	89 27       	eor	r24, r25
     fa4:	8c 93       	st	X, r24
	TOGGLE_BIT(PORTC,PC3);
     fa6:	a5 e3       	ldi	r26, 0x35	; 53
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e3       	ldi	r30, 0x35	; 53
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	90 81       	ld	r25, Z
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	89 27       	eor	r24, r25
     fb4:	8c 93       	st	X, r24
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	a8 e1       	ldi	r26, 0x18	; 24
     fbc:	bb e4       	ldi	r27, 0x4B	; 75
     fbe:	8b 87       	std	Y+11, r24	; 0x0b
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	ad 87       	std	Y+13, r26	; 0x0d
     fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	53 e4       	ldi	r21, 0x43	; 67
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 83       	std	Y+7, r24	; 0x07
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	a9 87       	std	Y+9, r26	; 0x09
     fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <openDoor+0x1be>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <openDoor+0x23c>
	else if (__tmp > 65535)
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <openDoor+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <openDoor+0x21e>
    104a:	89 e1       	ldi	r24, 0x19	; 25
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <openDoor+0x20c>
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <openDoor+0x200>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <openDoor+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <openDoor+0x248>
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000000);
	CLEAR_BIT(PORTC,PC4);//disable motor
    109a:	a5 e3       	ldi	r26, 0x35	; 53
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	8c 93       	st	X, r24
}
    10a8:	6c 96       	adiw	r28, 0x1c	; 28
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <increment_flag>:


void increment_flag()
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
g_flag++;
    10c2:	80 91 97 00 	lds	r24, 0x0097
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 97 00 	sts	0x0097, r24

}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <motorDOOR_off>:
void motorDOOR_off(void){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
	LCD_intgerToString(6);
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
	TOGGLE_BIT(PORTC,PC2);
    10e2:	a5 e3       	ldi	r26, 0x35	; 53
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e3       	ldi	r30, 0x35	; 53
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	90 81       	ld	r25, Z
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	89 27       	eor	r24, r25
    10f0:	8c 93       	st	X, r24
	TOGGLE_BIT(PORTC,PC3);
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	90 81       	ld	r25, Z
    10fc:	88 e0       	ldi	r24, 0x08	; 8
    10fe:	89 27       	eor	r24, r25
    1100:	8c 93       	st	X, r24

	TIMER1_stop();
    1102:	0e 94 a7 13 	call	0x274e	; 0x274e <TIMER1_stop>
	g_flag_motor=10;
    1106:	8a e0       	ldi	r24, 0x0A	; 10
    1108:	80 93 98 00 	sts	0x0098, r24
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <stop_motor_timer>:
void stop_motor_timer(void)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	LCD_intgerToString(2);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
	CLEAR_BIT(PORTC,PC4);
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
	TIMER1_stop();
    1130:	0e 94 a7 13 	call	0x274e	; 0x274e <TIMER1_stop>
	//g_flag=0;

}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <openDOOR>:
void openDOOR(void)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	6e 97       	sbiw	r28, 0x1e	; 30
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61

	/* configure pin PC0 and PC1 as output pins */

	SET_BIT(DDRC,PC2);
    114e:	a4 e3       	ldi	r26, 0x34	; 52
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e4 e3       	ldi	r30, 0x34	; 52
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC3);
    115c:	a4 e3       	ldi	r26, 0x34	; 52
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 e3       	ldi	r30, 0x34	; 52
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC4);
    116a:	a4 e3       	ldi	r26, 0x34	; 52
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	8c 93       	st	X, r24
	SET_BIT(PORTC,PC4);
    1178:	a5 e3       	ldi	r26, 0x35	; 53
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	8c 93       	st	X, r24

		TIMER1_setCallBack(motorDOOR_off);
    1186:	89 e6       	ldi	r24, 0x69	; 105
    1188:	98 e0       	ldi	r25, 0x08	; 8
    118a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <TIMER1_setCallBack>
		TIMER_data g_timer1A={timer1,normal,0,Prescaler_1024,0,0,0} ;
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	9e 8b       	std	Y+22, r25	; 0x16
    1194:	8d 8b       	std	Y+21, r24	; 0x15
    1196:	ef e7       	ldi	r30, 0x7F	; 127
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	f8 8f       	std	Y+24, r31	; 0x18
    119c:	ef 8b       	std	Y+23, r30	; 0x17
    119e:	fa e0       	ldi	r31, 0x0A	; 10
    11a0:	f9 8f       	std	Y+25, r31	; 0x19
    11a2:	ef 89       	ldd	r30, Y+23	; 0x17
    11a4:	f8 8d       	ldd	r31, Y+24	; 0x18
    11a6:	00 80       	ld	r0, Z
    11a8:	8f 89       	ldd	r24, Y+23	; 0x17
    11aa:	98 8d       	ldd	r25, Y+24	; 0x18
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	98 8f       	std	Y+24, r25	; 0x18
    11b0:	8f 8b       	std	Y+23, r24	; 0x17
    11b2:	ed 89       	ldd	r30, Y+21	; 0x15
    11b4:	fe 89       	ldd	r31, Y+22	; 0x16
    11b6:	00 82       	st	Z, r0
    11b8:	8d 89       	ldd	r24, Y+21	; 0x15
    11ba:	9e 89       	ldd	r25, Y+22	; 0x16
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	9e 8b       	std	Y+22, r25	; 0x16
    11c0:	8d 8b       	std	Y+21, r24	; 0x15
    11c2:	99 8d       	ldd	r25, Y+25	; 0x19
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	99 8f       	std	Y+25, r25	; 0x19
    11c8:	e9 8d       	ldd	r30, Y+25	; 0x19
    11ca:	ee 23       	and	r30, r30
    11cc:	51 f7       	brne	.-44     	; 0x11a2 <openDOOR+0x68>
		timer_init(&g_timer1A);
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <timer_init>

		CLEAR_BIT(PORTC,PC2);
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8b 7f       	andi	r24, 0xFB	; 251
    11e2:	8c 93       	st	X, r24
		SET_BIT(PORTC,PC3);
    11e4:	a5 e3       	ldi	r26, 0x35	; 53
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e5 e3       	ldi	r30, 0x35	; 53
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 60       	ori	r24, 0x08	; 8
    11f0:	8c 93       	st	X, r24

		while(g_flag_motor!=10){;}
    11f2:	80 91 98 00 	lds	r24, 0x0098
    11f6:	8a 30       	cpi	r24, 0x0A	; 10
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <openDOOR+0xb8>
		if(g_flag_motor==10)
    11fa:	80 91 98 00 	lds	r24, 0x0098
    11fe:	8a 30       	cpi	r24, 0x0A	; 10
    1200:	41 f5       	brne	.+80     	; 0x1252 <openDOOR+0x118>
		{
			TIMER1_setCallBack(stop_motor_timer);
    1202:	89 e8       	ldi	r24, 0x89	; 137
    1204:	98 e0       	ldi	r25, 0x08	; 8
    1206:	0e 94 7d 13 	call	0x26fa	; 0x26fa <TIMER1_setCallBack>
			TIMER_data g_timer1={timer1,normal,0,Prescaler_1024,0,0,0} ;
    120a:	ce 01       	movw	r24, r28
    120c:	0b 96       	adiw	r24, 0x0b	; 11
    120e:	9b 8f       	std	Y+27, r25	; 0x1b
    1210:	8a 8f       	std	Y+26, r24	; 0x1a
    1212:	e5 e7       	ldi	r30, 0x75	; 117
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	fd 8f       	std	Y+29, r31	; 0x1d
    1218:	ec 8f       	std	Y+28, r30	; 0x1c
    121a:	fa e0       	ldi	r31, 0x0A	; 10
    121c:	fe 8f       	std	Y+30, r31	; 0x1e
    121e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1220:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1222:	00 80       	ld	r0, Z
    1224:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1226:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9d 8f       	std	Y+29, r25	; 0x1d
    122c:	8c 8f       	std	Y+28, r24	; 0x1c
    122e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1230:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1232:	00 82       	st	Z, r0
    1234:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1236:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	9b 8f       	std	Y+27, r25	; 0x1b
    123c:	8a 8f       	std	Y+26, r24	; 0x1a
    123e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	9e 8f       	std	Y+30, r25	; 0x1e
    1244:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1246:	ee 23       	and	r30, r30
    1248:	51 f7       	brne	.-44     	; 0x121e <openDOOR+0xe4>
			timer_init(&g_timer1);
    124a:	ce 01       	movw	r24, r28
    124c:	0b 96       	adiw	r24, 0x0b	; 11
    124e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <timer_init>

		}
		}
    1252:	6e 96       	adiw	r28, 0x1e	; 30
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <system_pause>:
		TIMER1_setCallBack(stop_motor_timer);
*/
//}

void system_pause (void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2f 97       	sbiw	r28, 0x0f	; 15
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
	/*SYSTEM PAUSED FOR 1 MIN */
    /*BUZZER IS ON FOR 1 MIN */

	TIMER_data g_timer1A={timer1,compare,0,Prescaler_1024,0,65500,0} ;
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9c 87       	std	Y+12, r25	; 0x0c
    127e:	8b 87       	std	Y+11, r24	; 0x0b
    1280:	e9 e8       	ldi	r30, 0x89	; 137
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	fe 87       	std	Y+14, r31	; 0x0e
    1286:	ed 87       	std	Y+13, r30	; 0x0d
    1288:	fa e0       	ldi	r31, 0x0A	; 10
    128a:	ff 87       	std	Y+15, r31	; 0x0f
    128c:	ed 85       	ldd	r30, Y+13	; 0x0d
    128e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1290:	00 80       	ld	r0, Z
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	9e 87       	std	Y+14, r25	; 0x0e
    129a:	8d 87       	std	Y+13, r24	; 0x0d
    129c:	eb 85       	ldd	r30, Y+11	; 0x0b
    129e:	fc 85       	ldd	r31, Y+12	; 0x0c
    12a0:	00 82       	st	Z, r0
    12a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	9c 87       	std	Y+12, r25	; 0x0c
    12aa:	8b 87       	std	Y+11, r24	; 0x0b
    12ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ae:	91 50       	subi	r25, 0x01	; 1
    12b0:	9f 87       	std	Y+15, r25	; 0x0f
    12b2:	ef 85       	ldd	r30, Y+15	; 0x0f
    12b4:	ee 23       	and	r30, r30
    12b6:	51 f7       	brne	.-44     	; 0x128c <system_pause+0x28>
	timer_init(&g_timer1A);
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 d6 11 	call	0x23ac	; 0x23ac <timer_init>
	TIMER1_setCallBack(increment_flag);
    12c0:	8d e5       	ldi	r24, 0x5D	; 93
    12c2:	98 e0       	ldi	r25, 0x08	; 8
    12c4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <TIMER1_setCallBack>
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <system_pause+0x82>

	while(g_flag<7)
	{
		 SET_BIT(DDRA,PA0);
    12ca:	aa e3       	ldi	r26, 0x3A	; 58
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	8c 93       	st	X, r24
		 SET_BIT(PORTA,PA0);
    12d8:	ab e3       	ldi	r26, 0x3B	; 59
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	8c 93       	st	X, r24

	TIMER_data g_timer1A={timer1,compare,0,Prescaler_1024,0,65500,0} ;
	timer_init(&g_timer1A);
	TIMER1_setCallBack(increment_flag);

	while(g_flag<7)
    12e6:	80 91 97 00 	lds	r24, 0x0097
    12ea:	87 30       	cpi	r24, 0x07	; 7
    12ec:	70 f3       	brcs	.-36     	; 0x12ca <system_pause+0x66>
	{
		 SET_BIT(DDRA,PA0);
		 SET_BIT(PORTA,PA0);
	 }
	if(g_flag==7)
    12ee:	80 91 97 00 	lds	r24, 0x0097
    12f2:	87 30       	cpi	r24, 0x07	; 7
    12f4:	71 f4       	brne	.+28     	; 0x1312 <system_pause+0xae>
	{
		TOGGLE_BIT(PORTA,PA0);
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	90 81       	ld	r25, Z
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 27       	eor	r24, r25
    1304:	8c 93       	st	X, r24
		TIMER1_stop();
    1306:	0e 94 a7 13 	call	0x274e	; 0x274e <TIMER1_stop>
		g_flag=0;
    130a:	10 92 97 00 	sts	0x0097, r1
	    LCD_clearScreen();
    130e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_clearScreen>
	}
}
    1312:	2f 96       	adiw	r28, 0x0f	; 15
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <main>:



int main(void)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <main+0x6>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	uint8 user_choice=save;
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	8b 83       	std	Y+3, r24	; 0x03
	UART_init();
    1334:	0e 94 c6 13 	call	0x278c	; 0x278c <UART_init>
	while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
    1338:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
    133c:	80 31       	cpi	r24, 0x10	; 16
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x14>
	EEPROM_init();
    1340:	0e 94 2b 0a 	call	0x1456	; 0x1456 <EEPROM_init>
	LCD_init();
    1344:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_init>
	UART_sendString("I am Micro1#"); // send the required string to MC2
    1348:	80 e6       	ldi	r24, 0x60	; 96
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendString>
	
	uint8 matchState=false;
    1350:	1a 82       	std	Y+2, r1	; 0x02
	uint8 changePassword_matchState=false;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	02 c0       	rjmp	.+4      	; 0x135a <main+0x36>
    while(1)
    {

    	while((g_saveflag==false)&&(user_choice==save))
    	{
    		store_password();
    1356:	0e 94 a3 05 	call	0xb46	; 0xb46 <store_password>
	uint8 matchState=false;
	uint8 changePassword_matchState=false;
    while(1)
    {

    	while((g_saveflag==false)&&(user_choice==save))
    135a:	80 91 95 00 	lds	r24, 0x0095
    135e:	88 23       	and	r24, r24
    1360:	19 f4       	brne	.+6      	; 0x1368 <main+0x44>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	b9 f3       	breq	.-18     	; 0x1356 <main+0x32>
    	{
    		store_password();
    	}
    	user_choice=operation();
    1368:	0e 94 4d 06 	call	0xc9a	; 0xc9a <operation>
    136c:	8b 83       	std	Y+3, r24	; 0x03
    	if(user_choice==changepassword)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	85 30       	cpi	r24, 0x05	; 5
    1372:	a1 f5       	brne	.+104    	; 0x13dc <main+0xb8>
    1374:	11 c0       	rjmp	.+34     	; 0x1398 <main+0x74>
   	    	{
    	    	while ((g_maxEntry!=3)&&(changePassword_matchState==false))
    	    	    {
    	    			changePassword_matchState=if_savedPassword_matched();
    1376:	0e 94 56 06 	call	0xcac	; 0xcac <if_savedPassword_matched>
    137a:	89 83       	std	Y+1, r24	; 0x01

    	    			if (changePassword_matchState==false)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	88 23       	and	r24, r24
    1380:	59 f4       	brne	.+22     	; 0x1398 <main+0x74>
    	    				{

    	    					g_maxEntry++;
    1382:	80 91 94 00 	lds	r24, 0x0094
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 94 00 	sts	0x0094, r24
    	    					LCD_intgerToString(g_maxEntry);
    138c:	80 91 94 00 	lds	r24, 0x0094
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
    		store_password();
    	}
    	user_choice=operation();
    	if(user_choice==changepassword)
   	    	{
    	    	while ((g_maxEntry!=3)&&(changePassword_matchState==false))
    1398:	80 91 94 00 	lds	r24, 0x0094
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	19 f0       	breq	.+6      	; 0x13a6 <main+0x82>
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 23       	and	r24, r24
    13a4:	41 f3       	breq	.-48     	; 0x1376 <main+0x52>

    	    					g_maxEntry++;
    	    					LCD_intgerToString(g_maxEntry);
    	    				}
    	    		}
    	    	if ((g_maxEntry!=3)&&(changePassword_matchState==true))
    13a6:	80 91 94 00 	lds	r24, 0x0094
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	49 f0       	breq	.+18     	; 0x13c0 <main+0x9c>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	31 f4       	brne	.+12     	; 0x13c0 <main+0x9c>
    	    		{		

     		    		store_password();
    13b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <store_password>
     		    		g_maxEntry=0;
    13b8:	10 92 94 00 	sts	0x0094, r1
     		    		changePassword_matchState=false;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	cd cf       	rjmp	.-102    	; 0x135a <main+0x36>
       	    	    }
    	    	else if (g_maxEntry==3)
    13c0:	80 91 94 00 	lds	r24, 0x0094
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	49 f6       	brne	.-110    	; 0x135a <main+0x36>
    	    		{
    	    		LCD_intgerToString(4);
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
    	        		system_pause();
    13d0:	0e 94 32 09 	call	0x1264	; 0x1264 <system_pause>

    	        		g_maxEntry=0;
    13d4:	10 92 94 00 	sts	0x0094, r1
    	        		changePassword_matchState=false;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    13da:	bf cf       	rjmp	.-130    	; 0x135a <main+0x36>

    	    		}

    	    	}
    	/////////////////////////////////////////////
    	else if(user_choice==opendoor)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	a9 f5       	brne	.+106    	; 0x144c <main+0x128>
    13e2:	11 c0       	rjmp	.+34     	; 0x1406 <main+0xe2>
    	{
    	while ((g_maxEntry!=3)&&(matchState==false))
    	    {
    			matchState=if_savedPassword_matched();
    13e4:	0e 94 56 06 	call	0xcac	; 0xcac <if_savedPassword_matched>
    13e8:	8a 83       	std	Y+2, r24	; 0x02

    			if(matchState==false)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 23       	and	r24, r24
    13ee:	59 f4       	brne	.+22     	; 0x1406 <main+0xe2>
    			{

    				g_maxEntry++;
    13f0:	80 91 94 00 	lds	r24, 0x0094
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	80 93 94 00 	sts	0x0094, r24
    				LCD_intgerToString(g_maxEntry);
    13fa:	80 91 94 00 	lds	r24, 0x0094
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>

    	    	}
    	/////////////////////////////////////////////
    	else if(user_choice==opendoor)
    	{
    	while ((g_maxEntry!=3)&&(matchState==false))
    1406:	80 91 94 00 	lds	r24, 0x0094
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	19 f0       	breq	.+6      	; 0x1414 <main+0xf0>
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 23       	and	r24, r24
    1412:	41 f3       	breq	.-48     	; 0x13e4 <main+0xc0>

    				g_maxEntry++;
    				LCD_intgerToString(g_maxEntry);
    			}
    	    }
    	if ((g_maxEntry!=3)&&(matchState==true))
    1414:	80 91 94 00 	lds	r24, 0x0094
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	49 f0       	breq	.+18     	; 0x142e <main+0x10a>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	31 f4       	brne	.+12     	; 0x142e <main+0x10a>
    	    {		
    	    	g_maxEntry=0;
    1422:	10 92 94 00 	sts	0x0094, r1

    	    	openDoor();
    1426:	0e 94 25 07 	call	0xe4a	; 0xe4a <openDoor>
    	    	matchState=false;
    142a:	1a 82       	std	Y+2, r1	; 0x02
    142c:	96 cf       	rjmp	.-212    	; 0x135a <main+0x36>
    	    }
    	else if (g_maxEntry==3)
    142e:	80 91 94 00 	lds	r24, 0x0094
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	09 f0       	breq	.+2      	; 0x1438 <main+0x114>
    1436:	91 cf       	rjmp	.-222    	; 0x135a <main+0x36>
    		{
    		LCD_intgerToString(4);
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_intgerToString>
    		system_pause();
    1440:	0e 94 32 09 	call	0x1264	; 0x1264 <system_pause>

    		g_maxEntry=0;
    1444:	10 92 94 00 	sts	0x0094, r1
    		matchState=false;
    1448:	1a 82       	std	Y+2, r1	; 0x02
    144a:	87 cf       	rjmp	.-242    	; 0x135a <main+0x36>
    		}
    	}

    	else
    	{
    		g_maxEntry=0;
    144c:	10 92 94 00 	sts	0x0094, r1
    		matchState=false;
    1450:	1a 82       	std	Y+2, r1	; 0x02
    		changePassword_matchState=false;
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	82 cf       	rjmp	.-252    	; 0x135a <main+0x36>

00001456 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    145e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TWI_init>
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <EEPROM_writeByte+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <EEPROM_writeByte+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    147a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    147e:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	11 f0       	breq	.+4      	; 0x148a <EEPROM_writeByte+0x22>
        return ERROR;
    1486:	1c 82       	std	Y+4, r1	; 0x04
    1488:	28 c0       	rjmp	.+80     	; 0x14da <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	80 70       	andi	r24, 0x00	; 0
    1490:	97 70       	andi	r25, 0x07	; 7
    1492:	88 0f       	add	r24, r24
    1494:	89 2f       	mov	r24, r25
    1496:	88 1f       	adc	r24, r24
    1498:	99 0b       	sbc	r25, r25
    149a:	91 95       	neg	r25
    149c:	80 6a       	ori	r24, 0xA0	; 160
    149e:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    14a2:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    14a6:	88 31       	cpi	r24, 0x18	; 24
    14a8:	11 f0       	breq	.+4      	; 0x14ae <EEPROM_writeByte+0x46>
        return ERROR; 
    14aa:	1c 82       	std	Y+4, r1	; 0x04
    14ac:	16 c0       	rjmp	.+44     	; 0x14da <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    14b4:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    14b8:	88 32       	cpi	r24, 0x28	; 40
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <EEPROM_writeByte+0x58>
        return ERROR;
    14bc:	1c 82       	std	Y+4, r1	; 0x04
    14be:	0d c0       	rjmp	.+26     	; 0x14da <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    14c6:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    14ca:	88 32       	cpi	r24, 0x28	; 40
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <EEPROM_writeByte+0x6a>
        return ERROR;
    14ce:	1c 82       	std	Y+4, r1	; 0x04
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14d2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TWI_stop>
	
    return SUCCESS;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	8c 83       	std	Y+4, r24	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <EEPROM_readByte+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <EEPROM_readByte+0x8>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	7c 83       	std	Y+4, r23	; 0x04
    14fe:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1500:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1504:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	11 f0       	breq	.+4      	; 0x1510 <EEPROM_readByte+0x26>
        return ERROR;
    150c:	1d 82       	std	Y+5, r1	; 0x05
    150e:	44 c0       	rjmp	.+136    	; 0x1598 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	80 70       	andi	r24, 0x00	; 0
    1516:	97 70       	andi	r25, 0x07	; 7
    1518:	88 0f       	add	r24, r24
    151a:	89 2f       	mov	r24, r25
    151c:	88 1f       	adc	r24, r24
    151e:	99 0b       	sbc	r25, r25
    1520:	91 95       	neg	r25
    1522:	80 6a       	ori	r24, 0xA0	; 160
    1524:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1528:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    152c:	88 31       	cpi	r24, 0x18	; 24
    152e:	11 f0       	breq	.+4      	; 0x1534 <EEPROM_readByte+0x4a>
        return ERROR;
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	32 c0       	rjmp	.+100    	; 0x1598 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    153a:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    153e:	88 32       	cpi	r24, 0x28	; 40
    1540:	11 f0       	breq	.+4      	; 0x1546 <EEPROM_readByte+0x5c>
        return ERROR;
    1542:	1d 82       	std	Y+5, r1	; 0x05
    1544:	29 c0       	rjmp	.+82     	; 0x1598 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1546:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    154a:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    154e:	80 31       	cpi	r24, 0x10	; 16
    1550:	11 f0       	breq	.+4      	; 0x1556 <EEPROM_readByte+0x6c>
        return ERROR;
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	21 c0       	rjmp	.+66     	; 0x1598 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	80 70       	andi	r24, 0x00	; 0
    155c:	97 70       	andi	r25, 0x07	; 7
    155e:	88 0f       	add	r24, r24
    1560:	89 2f       	mov	r24, r25
    1562:	88 1f       	adc	r24, r24
    1564:	99 0b       	sbc	r25, r25
    1566:	91 95       	neg	r25
    1568:	81 6a       	ori	r24, 0xA1	; 161
    156a:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    156e:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    1572:	80 34       	cpi	r24, 0x40	; 64
    1574:	11 f0       	breq	.+4      	; 0x157a <EEPROM_readByte+0x90>
        return ERROR;
    1576:	1d 82       	std	Y+5, r1	; 0x05
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    157a:	0e 94 30 0b 	call	0x1660	; 0x1660 <TWI_readWithNACK>
    157e:	eb 81       	ldd	r30, Y+3	; 0x03
    1580:	fc 81       	ldd	r31, Y+4	; 0x04
    1582:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1584:	0e 94 43 0b 	call	0x1686	; 0x1686 <TWI_getStatus>
    1588:	88 35       	cpi	r24, 0x58	; 88
    158a:	11 f0       	breq	.+4      	; 0x1590 <EEPROM_readByte+0xa6>
        return ERROR;
    158c:	1d 82       	std	Y+5, r1	; 0x05
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1590:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TWI_stop>
    return SUCCESS;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    15b2:	e0 e2       	ldi	r30, 0x20	; 32
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	80 83       	st	Z, r24
	TWSR = 0x00;
    15ba:	e1 e2       	ldi	r30, 0x21	; 33
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    15c0:	e2 e2       	ldi	r30, 0x22	; 34
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    15c8:	e6 e5       	ldi	r30, 0x56	; 86
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	80 83       	st	Z, r24
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <TWI_start>:

void TWI_start(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    15de:	e6 e5       	ldi	r30, 0x56	; 86
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	84 ea       	ldi	r24, 0xA4	; 164
    15e4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15e6:	e6 e5       	ldi	r30, 0x56	; 86
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	88 23       	and	r24, r24
    15ee:	dc f7       	brge	.-10     	; 0x15e6 <TWI_start+0x10>
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <TWI_stop>:

void TWI_stop(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    15fe:	e6 e5       	ldi	r30, 0x56	; 86
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	84 e9       	ldi	r24, 0x94	; 148
    1604:	80 83       	st	Z, r24
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <TWI_write>:

void TWI_write(uint8 data)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	0f 92       	push	r0
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1618:	e3 e2       	ldi	r30, 0x23	; 35
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1620:	e6 e5       	ldi	r30, 0x56	; 86
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	84 e8       	ldi	r24, 0x84	; 132
    1626:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1628:	e6 e5       	ldi	r30, 0x56	; 86
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	88 23       	and	r24, r24
    1630:	dc f7       	brge	.-10     	; 0x1628 <TWI_write+0x1c>
}
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1642:	e6 e5       	ldi	r30, 0x56	; 86
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	84 ec       	ldi	r24, 0xC4	; 196
    1648:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    164a:	e6 e5       	ldi	r30, 0x56	; 86
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 23       	and	r24, r24
    1652:	dc f7       	brge	.-10     	; 0x164a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1654:	e3 e2       	ldi	r30, 0x23	; 35
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1668:	e6 e5       	ldi	r30, 0x56	; 86
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	84 e8       	ldi	r24, 0x84	; 132
    166e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1670:	e6 e5       	ldi	r30, 0x56	; 86
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	88 23       	and	r24, r24
    1678:	dc f7       	brge	.-10     	; 0x1670 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    167a:	e3 e2       	ldi	r30, 0x23	; 35
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1690:	e1 e2       	ldi	r30, 0x21	; 33
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 7f       	andi	r24, 0xF8	; 248
    1698:	89 83       	std	Y+1, r24	; 0x01
    return status;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <__vector_2>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* External INT1 Interrupt Service Routine */
ISR(INT1_vect)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL)
    16ce:	80 91 99 00 	lds	r24, 0x0099
    16d2:	90 91 9a 00 	lds	r25, 0x009A
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <__vector_2+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16da:	e0 91 99 00 	lds	r30, 0x0099
    16de:	f0 91 9a 00 	lds	r31, 0x009A
    16e2:	09 95       	icall
		}
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <Interrupt_Init>:
 * Description : Function to initialize the ICU driver
 * 	1. Set the required external  interrupt.
 * 	2. Set the required edge detection.
 */
void Interrupt_Init(INT_NUM interrupt_n,clock_type clk_type)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <Interrupt_Init+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
	/* TO initialize  interrupt 0 */
	if(interrupt_n==0)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 23       	and	r24, r24
    171c:	99 f5       	brne	.+102    	; 0x1784 <Interrupt_Init+0x7a>
		{
		/* Configure INT0/PD2 as input pin*/
		CLEAR_BIT(DDRD,PD2);
    171e:	a1 e3       	ldi	r26, 0x31	; 49
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e1 e3       	ldi	r30, 0x31	; 49
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8b 7f       	andi	r24, 0xFB	; 251
    172a:	8c 93       	st	X, r24
		/* Enable external interrupt pin INT0*/
		SET_BIT(GICR,INT0);
    172c:	ab e5       	ldi	r26, 0x5B	; 91
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	eb e5       	ldi	r30, 0x5B	; 91
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 64       	ori	r24, 0x40	; 64
    1738:	8c 93       	st	X, r24
		if(clk_type==falling_edge)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	88 23       	and	r24, r24
    173e:	79 f4       	brne	.+30     	; 0x175e <Interrupt_Init+0x54>
				{
				/* Trigger INT0 with the falling edge*/
				SET_BIT(MCUCR,ISC01);
    1740:	a5 e5       	ldi	r26, 0x55	; 85
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e5       	ldi	r30, 0x55	; 85
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	82 60       	ori	r24, 0x02	; 2
    174c:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC00);
    174e:	a5 e5       	ldi	r26, 0x55	; 85
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e5       	ldi	r30, 0x55	; 85
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8e 7f       	andi	r24, 0xFE	; 254
    175a:	8c 93       	st	X, r24
    175c:	6e c0       	rjmp	.+220    	; 0x183a <Interrupt_Init+0x130>
				}

				else if (clk_type==rising_edge)
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	09 f0       	breq	.+2      	; 0x1766 <Interrupt_Init+0x5c>
    1764:	6a c0       	rjmp	.+212    	; 0x183a <Interrupt_Init+0x130>
				{
					/* Trigger INT0 with the rising edge*/
					SET_BIT(MCUCR,ISC01);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC00);
    1774:	a5 e5       	ldi	r26, 0x55	; 85
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	8c 93       	st	X, r24
    1782:	5b c0       	rjmp	.+182    	; 0x183a <Interrupt_Init+0x130>
				}
		}
/****************************************************************/
	/* TO initialize  interrupt 1 */
	else if(interrupt_n==1)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 f5       	brne	.+100    	; 0x17ee <Interrupt_Init+0xe4>
	{
		 /* Configure INT1/PD3 as input pin*/
		CLEAR_BIT(DDRD,PD3);
    178a:	a1 e3       	ldi	r26, 0x31	; 49
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e1 e3       	ldi	r30, 0x31	; 49
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	8c 93       	st	X, r24
		 /* Enable external interrupt pin INT1*/
		SET_BIT(GICR,INT1);
    1798:	ab e5       	ldi	r26, 0x5B	; 91
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	eb e5       	ldi	r30, 0x5B	; 91
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	8c 93       	st	X, r24
		if(clk_type==falling_edge)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 23       	and	r24, r24
    17aa:	79 f4       	brne	.+30     	; 0x17ca <Interrupt_Init+0xc0>
		{
		/*Trigger INT1 with the falling edge*/
		SET_BIT(MCUCR,ISC11);
    17ac:	a5 e5       	ldi	r26, 0x55	; 85
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e5       	ldi	r30, 0x55	; 85
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC10);
    17ba:	a5 e5       	ldi	r26, 0x55	; 85
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e5       	ldi	r30, 0x55	; 85
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	8c 93       	st	X, r24
    17c8:	38 c0       	rjmp	.+112    	; 0x183a <Interrupt_Init+0x130>
		}
		else if (clk_type==rising_edge)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a9 f5       	brne	.+106    	; 0x183a <Interrupt_Init+0x130>
		{
			/*Trigger INT1 with the rising edge*/
			SET_BIT(MCUCR,ISC11);
    17d0:	a5 e5       	ldi	r26, 0x55	; 85
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e5       	ldi	r30, 0x55	; 85
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	88 60       	ori	r24, 0x08	; 8
    17dc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC10);
    17de:	a5 e5       	ldi	r26, 0x55	; 85
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 e5       	ldi	r30, 0x55	; 85
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	8c 93       	st	X, r24
    17ec:	26 c0       	rjmp	.+76     	; 0x183a <Interrupt_Init+0x130>
		}
	}
/****************************************************************/
	/* TO initialize  interrupt 2 */
	else if(interrupt_n==2)
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	19 f5       	brne	.+70     	; 0x183a <Interrupt_Init+0x130>
		{
			/* Configure INT2/PB2 as input pin*/
			CLEAR_BIT(DDRB,PB2);
    17f4:	a7 e3       	ldi	r26, 0x37	; 55
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	8c 93       	st	X, r24
			/* Enable external interrupt pin INT2*/
			SET_BIT(GICR,INT2);
    1802:	ab e5       	ldi	r26, 0x5B	; 91
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e5       	ldi	r30, 0x5B	; 91
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 62       	ori	r24, 0x20	; 32
    180e:	8c 93       	st	X, r24

			if(clk_type==falling_edge)
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 23       	and	r24, r24
    1814:	41 f4       	brne	.+16     	; 0x1826 <Interrupt_Init+0x11c>
				{
					/* Trigger INT2 with the falling edge*/
					CLEAR_BIT(MCUCR,ISC2);
    1816:	a5 e5       	ldi	r26, 0x55	; 85
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e5       	ldi	r30, 0x55	; 85
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	8f 7b       	andi	r24, 0xBF	; 191
    1822:	8c 93       	st	X, r24
    1824:	0a c0       	rjmp	.+20     	; 0x183a <Interrupt_Init+0x130>
				}

			else if (clk_type==rising_edge)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	39 f4       	brne	.+14     	; 0x183a <Interrupt_Init+0x130>
				{
					/* Trigger INT2 with the RISING edge*/
					SET_BIT(MCUCR,ISC2);
    182c:	a5 e5       	ldi	r26, 0x55	; 85
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e5       	ldi	r30, 0x55	; 85
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	8c 93       	st	X, r24
				}
		}
/****************************************************************/
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Interrupt_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Interrupt_setCallBack(void(*a_ptr)(void))
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <Interrupt_setCallBack+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	90 93 9a 00 	sts	0x009A, r25
    185a:	80 93 99 00 	sts	0x0099, r24
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1870:	e7 e3       	ldi	r30, 0x37	; 55
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1878:	aa e3       	ldi	r26, 0x3A	; 58
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ea e3       	ldi	r30, 0x3A	; 58
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 67       	ori	r24, 0x70	; 112
    1884:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1886:	88 e3       	ldi	r24, 0x38	; 56
    1888:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    188c:	8c e0       	ldi	r24, 0x0C	; 12
    188e:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_sendCommand>
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	e9 97       	sbiw	r28, 0x39	; 57
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8f 7e       	andi	r24, 0xEF	; 239
    18c0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 7d       	andi	r24, 0xDF	; 223
    18ce:	8c 93       	st	X, r24
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	8d ab       	std	Y+53, r24	; 0x35
    18da:	9e ab       	std	Y+54, r25	; 0x36
    18dc:	af ab       	std	Y+55, r26	; 0x37
    18de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6d a9       	ldd	r22, Y+53	; 0x35
    18e2:	7e a9       	ldd	r23, Y+54	; 0x36
    18e4:	8f a9       	ldd	r24, Y+55	; 0x37
    18e6:	98 ad       	ldd	r25, Y+56	; 0x38
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	53 e4       	ldi	r21, 0x43	; 67
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	89 ab       	std	Y+49, r24	; 0x31
    18fa:	9a ab       	std	Y+50, r25	; 0x32
    18fc:	ab ab       	std	Y+51, r26	; 0x33
    18fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <LCD_sendCommand+0x84>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	98 ab       	std	Y+48, r25	; 0x30
    191e:	8f a7       	std	Y+47, r24	; 0x2f
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6d a9       	ldd	r22, Y+53	; 0x35
    193c:	7e a9       	ldd	r23, Y+54	; 0x36
    193e:	8f a9       	ldd	r24, Y+55	; 0x37
    1940:	98 ad       	ldd	r25, Y+56	; 0x38
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_sendCommand+0xe4>
    1964:	89 e1       	ldi	r24, 0x19	; 25
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9e a7       	std	Y+46, r25	; 0x2e
    196a:	8d a7       	std	Y+45, r24	; 0x2d
    196c:	8d a5       	ldd	r24, Y+45	; 0x2d
    196e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_sendCommand+0xd2>
    1974:	9e a7       	std	Y+46, r25	; 0x2e
    1976:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8f a5       	ldd	r24, Y+47	; 0x2f
    197a:	98 a9       	ldd	r25, Y+48	; 0x30
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	98 ab       	std	Y+48, r25	; 0x30
    1980:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8f a5       	ldd	r24, Y+47	; 0x2f
    1984:	98 a9       	ldd	r25, Y+48	; 0x30
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_sendCommand+0xc6>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	69 a9       	ldd	r22, Y+49	; 0x31
    198e:	7a a9       	ldd	r23, Y+50	; 0x32
    1990:	8b a9       	ldd	r24, Y+51	; 0x33
    1992:	9c a9       	ldd	r25, Y+52	; 0x34
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	98 ab       	std	Y+48, r25	; 0x30
    199e:	8f a7       	std	Y+47, r24	; 0x2f
    19a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a2:	98 a9       	ldd	r25, Y+48	; 0x30
    19a4:	9c a7       	std	Y+44, r25	; 0x2c
    19a6:	8b a7       	std	Y+43, r24	; 0x2b
    19a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_sendCommand+0x10e>
    19b0:	9c a7       	std	Y+44, r25	; 0x2c
    19b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    19b4:	ab e3       	ldi	r26, 0x3B	; 59
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	eb e3       	ldi	r30, 0x3B	; 59
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 64       	ori	r24, 0x40	; 64
    19c0:	8c 93       	st	X, r24
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e8       	ldi	r26, 0x80	; 128
    19c8:	bf e3       	ldi	r27, 0x3F	; 63
    19ca:	8f a3       	std	Y+39, r24	; 0x27
    19cc:	98 a7       	std	Y+40, r25	; 0x28
    19ce:	a9 a7       	std	Y+41, r26	; 0x29
    19d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6f a1       	ldd	r22, Y+39	; 0x27
    19d4:	78 a5       	ldd	r23, Y+40	; 0x28
    19d6:	89 a5       	ldd	r24, Y+41	; 0x29
    19d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a e7       	ldi	r20, 0x7A	; 122
    19e0:	53 e4       	ldi	r21, 0x43	; 67
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8b a3       	std	Y+35, r24	; 0x23
    19ec:	9c a3       	std	Y+36, r25	; 0x24
    19ee:	ad a3       	std	Y+37, r26	; 0x25
    19f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	8d a1       	ldd	r24, Y+37	; 0x25
    19f8:	9e a1       	ldd	r25, Y+38	; 0x26
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_sendCommand+0x176>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9a a3       	std	Y+34, r25	; 0x22
    1a10:	89 a3       	std	Y+33, r24	; 0x21
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a30:	89 a5       	ldd	r24, Y+41	; 0x29
    1a32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9a a3       	std	Y+34, r25	; 0x22
    1a52:	89 a3       	std	Y+33, r24	; 0x21
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_sendCommand+0x1d6>
    1a56:	89 e1       	ldi	r24, 0x19	; 25
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	98 a3       	std	Y+32, r25	; 0x20
    1a5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a60:	98 a1       	ldd	r25, Y+32	; 0x20
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_sendCommand+0x1c4>
    1a66:	98 a3       	std	Y+32, r25	; 0x20
    1a68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9a a3       	std	Y+34, r25	; 0x22
    1a72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	89 a1       	ldd	r24, Y+33	; 0x21
    1a76:	9a a1       	ldd	r25, Y+34	; 0x22
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_sendCommand+0x1b8>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9a a3       	std	Y+34, r25	; 0x22
    1a90:	89 a3       	std	Y+33, r24	; 0x21
    1a92:	89 a1       	ldd	r24, Y+33	; 0x21
    1a94:	9a a1       	ldd	r25, Y+34	; 0x22
    1a96:	9e 8f       	std	Y+30, r25	; 0x1e
    1a98:	8d 8f       	std	Y+29, r24	; 0x1d
    1a9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_sendCommand+0x200>
    1aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	89 ad       	ldd	r24, Y+57	; 0x39
    1aac:	80 83       	st	Z, r24
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	89 8f       	std	Y+25, r24	; 0x19
    1ab8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aba:	ab 8f       	std	Y+27, r26	; 0x1b
    1abc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a e7       	ldi	r20, 0x7A	; 122
    1acc:	53 e4       	ldi	r21, 0x43	; 67
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8d 8b       	std	Y+21, r24	; 0x15
    1ad8:	9e 8b       	std	Y+22, r25	; 0x16
    1ada:	af 8b       	std	Y+23, r26	; 0x17
    1adc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_sendCommand+0x262>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_sendCommand+0x2c2>
    1b42:	89 e1       	ldi	r24, 0x19	; 25
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9a 8b       	std	Y+18, r25	; 0x12
    1b48:	89 8b       	std	Y+17, r24	; 0x11
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_sendCommand+0x2b0>
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_sendCommand+0x2a4>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b70:	98 8d       	ldd	r25, Y+24	; 0x18
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	98 8b       	std	Y+16, r25	; 0x10
    1b84:	8f 87       	std	Y+15, r24	; 0x0f
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	98 89       	ldd	r25, Y+16	; 0x10
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_sendCommand+0x2ec>
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b92:	ab e3       	ldi	r26, 0x3B	; 59
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	eb e3       	ldi	r30, 0x3B	; 59
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7b       	andi	r24, 0xBF	; 191
    1b9e:	8c 93       	st	X, r24
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	8b 87       	std	Y+11, r24	; 0x0b
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	ad 87       	std	Y+13, r26	; 0x0d
    1bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	53 e4       	ldi	r21, 0x43	; 67
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	98 87       	std	Y+8, r25	; 0x08
    1bcc:	a9 87       	std	Y+9, r26	; 0x09
    1bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_sendCommand+0x354>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_sendCommand+0x3b4>
    1c34:	89 e1       	ldi	r24, 0x19	; 25
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_sendCommand+0x3a2>
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_sendCommand+0x396>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_sendCommand+0x3de>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c84:	e9 96       	adiw	r28, 0x39	; 57
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	e9 97       	sbiw	r28, 0x39	; 57
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1cac:	ab e3       	ldi	r26, 0x3B	; 59
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e3       	ldi	r30, 0x3B	; 59
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 61       	ori	r24, 0x10	; 16
    1cb8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1cba:	ab e3       	ldi	r26, 0x3B	; 59
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	eb e3       	ldi	r30, 0x3B	; 59
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 7d       	andi	r24, 0xDF	; 223
    1cc6:	8c 93       	st	X, r24
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e8       	ldi	r26, 0x80	; 128
    1cce:	bf e3       	ldi	r27, 0x3F	; 63
    1cd0:	8d ab       	std	Y+53, r24	; 0x35
    1cd2:	9e ab       	std	Y+54, r25	; 0x36
    1cd4:	af ab       	std	Y+55, r26	; 0x37
    1cd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cda:	7e a9       	ldd	r23, Y+54	; 0x36
    1cdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cde:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	53 e4       	ldi	r21, 0x43	; 67
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	89 ab       	std	Y+49, r24	; 0x31
    1cf2:	9a ab       	std	Y+50, r25	; 0x32
    1cf4:	ab ab       	std	Y+51, r26	; 0x33
    1cf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <LCD_displayCharacter+0x84>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1d1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d20:	9c a9       	ldd	r25, Y+52	; 0x34
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6d a9       	ldd	r22, Y+53	; 0x35
    1d34:	7e a9       	ldd	r23, Y+54	; 0x36
    1d36:	8f a9       	ldd	r24, Y+55	; 0x37
    1d38:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	98 ab       	std	Y+48, r25	; 0x30
    1d58:	8f a7       	std	Y+47, r24	; 0x2f
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <LCD_displayCharacter+0xe4>
    1d5c:	89 e1       	ldi	r24, 0x19	; 25
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9e a7       	std	Y+46, r25	; 0x2e
    1d62:	8d a7       	std	Y+45, r24	; 0x2d
    1d64:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d66:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_displayCharacter+0xd2>
    1d6c:	9e a7       	std	Y+46, r25	; 0x2e
    1d6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d72:	98 a9       	ldd	r25, Y+48	; 0x30
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	98 ab       	std	Y+48, r25	; 0x30
    1d78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <LCD_displayCharacter+0xc6>
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	69 a9       	ldd	r22, Y+49	; 0x31
    1d86:	7a a9       	ldd	r23, Y+50	; 0x32
    1d88:	8b a9       	ldd	r24, Y+51	; 0x33
    1d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	98 ab       	std	Y+48, r25	; 0x30
    1d96:	8f a7       	std	Y+47, r24	; 0x2f
    1d98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9c:	9c a7       	std	Y+44, r25	; 0x2c
    1d9e:	8b a7       	std	Y+43, r24	; 0x2b
    1da0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_displayCharacter+0x10e>
    1da8:	9c a7       	std	Y+44, r25	; 0x2c
    1daa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1dac:	ab e3       	ldi	r26, 0x3B	; 59
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	eb e3       	ldi	r30, 0x3B	; 59
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	80 64       	ori	r24, 0x40	; 64
    1db8:	8c 93       	st	X, r24
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	8f a3       	std	Y+39, r24	; 0x27
    1dc4:	98 a7       	std	Y+40, r25	; 0x28
    1dc6:	a9 a7       	std	Y+41, r26	; 0x29
    1dc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6f a1       	ldd	r22, Y+39	; 0x27
    1dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dce:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a e7       	ldi	r20, 0x7A	; 122
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8b a3       	std	Y+35, r24	; 0x23
    1de4:	9c a3       	std	Y+36, r25	; 0x24
    1de6:	ad a3       	std	Y+37, r26	; 0x25
    1de8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dea:	6b a1       	ldd	r22, Y+35	; 0x23
    1dec:	7c a1       	ldd	r23, Y+36	; 0x24
    1dee:	8d a1       	ldd	r24, Y+37	; 0x25
    1df0:	9e a1       	ldd	r25, Y+38	; 0x26
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_displayCharacter+0x176>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1e0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e10:	8d a1       	ldd	r24, Y+37	; 0x25
    1e12:	9e a1       	ldd	r25, Y+38	; 0x26
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6f a1       	ldd	r22, Y+39	; 0x27
    1e26:	78 a5       	ldd	r23, Y+40	; 0x28
    1e28:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9a a3       	std	Y+34, r25	; 0x22
    1e4a:	89 a3       	std	Y+33, r24	; 0x21
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_displayCharacter+0x1d6>
    1e4e:	89 e1       	ldi	r24, 0x19	; 25
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	98 a3       	std	Y+32, r25	; 0x20
    1e54:	8f 8f       	std	Y+31, r24	; 0x1f
    1e56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e58:	98 a1       	ldd	r25, Y+32	; 0x20
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_displayCharacter+0x1c4>
    1e5e:	98 a3       	std	Y+32, r25	; 0x20
    1e60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	89 a1       	ldd	r24, Y+33	; 0x21
    1e64:	9a a1       	ldd	r25, Y+34	; 0x22
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_displayCharacter+0x1b8>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6b a1       	ldd	r22, Y+35	; 0x23
    1e78:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9a a3       	std	Y+34, r25	; 0x22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
    1e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e90:	8d 8f       	std	Y+29, r24	; 0x1d
    1e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_displayCharacter+0x200>
    1e9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1e9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea4:	80 83       	st	Z, r24
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e8       	ldi	r26, 0x80	; 128
    1eac:	bf e3       	ldi	r27, 0x3F	; 63
    1eae:	89 8f       	std	Y+25, r24	; 0x19
    1eb0:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb2:	ab 8f       	std	Y+27, r26	; 0x1b
    1eb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a e7       	ldi	r20, 0x7A	; 122
    1ec4:	53 e4       	ldi	r21, 0x43	; 67
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8d 8b       	std	Y+21, r24	; 0x15
    1ed0:	9e 8b       	std	Y+22, r25	; 0x16
    1ed2:	af 8b       	std	Y+23, r26	; 0x17
    1ed4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eda:	8f 89       	ldd	r24, Y+23	; 0x17
    1edc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	69 8d       	ldd	r22, Y+25	; 0x19
    1f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9c 8b       	std	Y+20, r25	; 0x14
    1f36:	8b 8b       	std	Y+19, r24	; 0x13
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <LCD_displayCharacter+0x2c2>
    1f3a:	89 e1       	ldi	r24, 0x19	; 25
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9a 8b       	std	Y+18, r25	; 0x12
    1f40:	89 8b       	std	Y+17, r24	; 0x11
    1f42:	89 89       	ldd	r24, Y+17	; 0x11
    1f44:	9a 89       	ldd	r25, Y+18	; 0x12
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_displayCharacter+0x2b0>
    1f4a:	9a 8b       	std	Y+18, r25	; 0x12
    1f4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9c 8b       	std	Y+20, r25	; 0x14
    1f56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <LCD_displayCharacter+0x2a4>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9c 8b       	std	Y+20, r25	; 0x14
    1f74:	8b 8b       	std	Y+19, r24	; 0x13
    1f76:	8b 89       	ldd	r24, Y+19	; 0x13
    1f78:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7a:	98 8b       	std	Y+16, r25	; 0x10
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
    1f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f80:	98 89       	ldd	r25, Y+16	; 0x10
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_displayCharacter+0x2ec>
    1f86:	98 8b       	std	Y+16, r25	; 0x10
    1f88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f8a:	ab e3       	ldi	r26, 0x3B	; 59
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb e3       	ldi	r30, 0x3B	; 59
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	8f 7b       	andi	r24, 0xBF	; 191
    1f96:	8c 93       	st	X, r24
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e8       	ldi	r26, 0x80	; 128
    1f9e:	bf e3       	ldi	r27, 0x3F	; 63
    1fa0:	8b 87       	std	Y+11, r24	; 0x0b
    1fa2:	9c 87       	std	Y+12, r25	; 0x0c
    1fa4:	ad 87       	std	Y+13, r26	; 0x0d
    1fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a e7       	ldi	r20, 0x7A	; 122
    1fb6:	53 e4       	ldi	r21, 0x43	; 67
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
    1fc2:	98 87       	std	Y+8, r25	; 0x08
    1fc4:	a9 87       	std	Y+9, r26	; 0x09
    1fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fca:	78 85       	ldd	r23, Y+8	; 0x08
    1fcc:	89 85       	ldd	r24, Y+9	; 0x09
    1fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_displayCharacter+0x354>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	6b 85       	ldd	r22, Y+11	; 0x0b
    2004:	7c 85       	ldd	r23, Y+12	; 0x0c
    2006:	8d 85       	ldd	r24, Y+13	; 0x0d
    2008:	9e 85       	ldd	r25, Y+14	; 0x0e
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	0f c0       	rjmp	.+30     	; 0x204a <LCD_displayCharacter+0x3b4>
    202c:	89 e1       	ldi	r24, 0x19	; 25
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_displayCharacter+0x3a2>
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <LCD_displayCharacter+0x396>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_displayCharacter+0x3de>
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    207c:	e9 96       	adiw	r28, 0x39	; 57
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <LCD_displayString+0x6>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	80 81       	ld	r24, Z
    20b4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_displayCharacter>
		i++;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	80 81       	ld	r24, Z
    20d0:	88 23       	and	r24, r24
    20d2:	39 f7       	brne	.-50     	; 0x20a2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <LCD_goToRowColumn+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <LCD_goToRowColumn+0x8>
    20e8:	0f 92       	push	r0
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	3d 83       	std	Y+5, r19	; 0x05
    20fa:	2c 83       	std	Y+4, r18	; 0x04
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	91 05       	cpc	r25, r1
    2104:	c1 f0       	breq	.+48     	; 0x2136 <LCD_goToRowColumn+0x56>
    2106:	2c 81       	ldd	r18, Y+4	; 0x04
    2108:	3d 81       	ldd	r19, Y+5	; 0x05
    210a:	22 30       	cpi	r18, 0x02	; 2
    210c:	31 05       	cpc	r19, r1
    210e:	2c f4       	brge	.+10     	; 0x211a <LCD_goToRowColumn+0x3a>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	61 f0       	breq	.+24     	; 0x2130 <LCD_goToRowColumn+0x50>
    2118:	19 c0       	rjmp	.+50     	; 0x214c <LCD_goToRowColumn+0x6c>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	69 f0       	breq	.+26     	; 0x213e <LCD_goToRowColumn+0x5e>
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	91 05       	cpc	r25, r1
    212c:	61 f0       	breq	.+24     	; 0x2146 <LCD_goToRowColumn+0x66>
    212e:	0e c0       	rjmp	.+28     	; 0x214c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	0b c0       	rjmp	.+22     	; 0x214c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	80 5c       	subi	r24, 0xC0	; 192
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	07 c0       	rjmp	.+14     	; 0x214c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	80 5f       	subi	r24, 0xF0	; 240
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	03 c0       	rjmp	.+6      	; 0x214c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	80 5b       	subi	r24, 0xB0	; 176
    214a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 68       	ori	r24, 0x80	; 128
    2150:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_sendCommand>
}
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_displayStringRowColumn+0x6>
    216a:	00 d0       	rcall	.+0      	; 0x216c <LCD_displayStringRowColumn+0x8>
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	6a 83       	std	Y+2, r22	; 0x02
    2174:	5c 83       	std	Y+4, r21	; 0x04
    2176:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	6a 81       	ldd	r22, Y+2	; 0x02
    217c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_displayString>
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	62 97       	sbiw	r28, 0x12	; 18
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	9e 01       	movw	r18, r28
    21b4:	2f 5f       	subi	r18, 0xFF	; 255
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	b9 01       	movw	r22, r18
    21ba:	4a e0       	ldi	r20, 0x0A	; 10
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	0e 94 b2 14 	call	0x2964	; 0x2964 <itoa>
   LCD_displayString(buff);
    21c2:	ce 01       	movw	r24, r28
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_displayString>
}
    21ca:	62 96       	adiw	r28, 0x12	; 18
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_sendCommand>
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <__vector_19>:
	  		 		//}
	 //}
 //}
 /////////////////////////////////////////////////////////////////
 ISR(TIMER0_COMP_vect)
 {
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	0f 92       	push	r0
    21f8:	11 24       	eor	r1, r1
    21fa:	2f 93       	push	r18
    21fc:	3f 93       	push	r19
    21fe:	4f 93       	push	r20
    2200:	5f 93       	push	r21
    2202:	6f 93       	push	r22
    2204:	7f 93       	push	r23
    2206:	8f 93       	push	r24
    2208:	9f 93       	push	r25
    220a:	af 93       	push	r26
    220c:	bf 93       	push	r27
    220e:	ef 93       	push	r30
    2210:	ff 93       	push	r31
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	 if(g_callBackPtr0 != NULL)
    221a:	80 91 9b 00 	lds	r24, 0x009B
    221e:	90 91 9c 00 	lds	r25, 0x009C
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	29 f0       	breq	.+10     	; 0x2230 <__vector_19+0x40>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2226:	e0 91 9b 00 	lds	r30, 0x009B
    222a:	f0 91 9c 00 	lds	r31, 0x009C
    222e:	09 95       	icall
	  		 		}
 }
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	ff 91       	pop	r31
    2236:	ef 91       	pop	r30
    2238:	bf 91       	pop	r27
    223a:	af 91       	pop	r26
    223c:	9f 91       	pop	r25
    223e:	8f 91       	pop	r24
    2240:	7f 91       	pop	r23
    2242:	6f 91       	pop	r22
    2244:	5f 91       	pop	r21
    2246:	4f 91       	pop	r20
    2248:	3f 91       	pop	r19
    224a:	2f 91       	pop	r18
    224c:	0f 90       	pop	r0
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	0f 90       	pop	r0
    2252:	1f 90       	pop	r1
    2254:	18 95       	reti

00002256 <__vector_8>:
/////////////////////////////////////////////////////////////////
 ISR(TIMER1_OVF_vect)
 {
    2256:	1f 92       	push	r1
    2258:	0f 92       	push	r0
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	0f 92       	push	r0
    225e:	11 24       	eor	r1, r1
    2260:	2f 93       	push	r18
    2262:	3f 93       	push	r19
    2264:	4f 93       	push	r20
    2266:	5f 93       	push	r21
    2268:	6f 93       	push	r22
    226a:	7f 93       	push	r23
    226c:	8f 93       	push	r24
    226e:	9f 93       	push	r25
    2270:	af 93       	push	r26
    2272:	bf 93       	push	r27
    2274:	ef 93       	push	r30
    2276:	ff 93       	push	r31
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	 if(g_callBackPtr1 != NULL)
    2280:	80 91 9d 00 	lds	r24, 0x009D
    2284:	90 91 9e 00 	lds	r25, 0x009E
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	29 f0       	breq	.+10     	; 0x2296 <__vector_8+0x40>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    228c:	e0 91 9d 00 	lds	r30, 0x009D
    2290:	f0 91 9e 00 	lds	r31, 0x009E
    2294:	09 95       	icall
	  		 		}
 }
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	ff 91       	pop	r31
    229c:	ef 91       	pop	r30
    229e:	bf 91       	pop	r27
    22a0:	af 91       	pop	r26
    22a2:	9f 91       	pop	r25
    22a4:	8f 91       	pop	r24
    22a6:	7f 91       	pop	r23
    22a8:	6f 91       	pop	r22
    22aa:	5f 91       	pop	r21
    22ac:	4f 91       	pop	r20
    22ae:	3f 91       	pop	r19
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	0f 90       	pop	r0
    22b8:	1f 90       	pop	r1
    22ba:	18 95       	reti

000022bc <__vector_6>:

///////////////////////////////////////////
ISR(TIMER1_COMPA_vect)
 {
    22bc:	1f 92       	push	r1
    22be:	0f 92       	push	r0
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	0f 92       	push	r0
    22c4:	11 24       	eor	r1, r1
    22c6:	2f 93       	push	r18
    22c8:	3f 93       	push	r19
    22ca:	4f 93       	push	r20
    22cc:	5f 93       	push	r21
    22ce:	6f 93       	push	r22
    22d0:	7f 93       	push	r23
    22d2:	8f 93       	push	r24
    22d4:	9f 93       	push	r25
    22d6:	af 93       	push	r26
    22d8:	bf 93       	push	r27
    22da:	ef 93       	push	r30
    22dc:	ff 93       	push	r31
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
 	flag++;
    22e6:	80 91 9f 00 	lds	r24, 0x009F
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 9f 00 	sts	0x009F, r24
 	 if(flag==7)
    22f0:	80 91 9f 00 	lds	r24, 0x009F
    22f4:	87 30       	cpi	r24, 0x07	; 7
    22f6:	59 f4       	brne	.+22     	; 0x230e <__vector_6+0x52>
 	 {
 		 if(g_callBackPtr1 != NULL)
    22f8:	80 91 9d 00 	lds	r24, 0x009D
    22fc:	90 91 9e 00 	lds	r25, 0x009E
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	29 f0       	breq	.+10     	; 0x230e <__vector_6+0x52>
 		 		{
 		 			/* Call the Call Back function in the application after the edge is detected */
 		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2304:	e0 91 9d 00 	lds	r30, 0x009D
    2308:	f0 91 9e 00 	lds	r31, 0x009E
    230c:	09 95       	icall
 		 		}
 	 }
 }
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <__vector_7>:


 //////////////////////////////////////////
 ISR (TIMER1_COMPB_vect)
 {flag2++;
    2334:	1f 92       	push	r1
    2336:	0f 92       	push	r0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	0f 92       	push	r0
    233c:	11 24       	eor	r1, r1
    233e:	2f 93       	push	r18
    2340:	3f 93       	push	r19
    2342:	4f 93       	push	r20
    2344:	5f 93       	push	r21
    2346:	6f 93       	push	r22
    2348:	7f 93       	push	r23
    234a:	8f 93       	push	r24
    234c:	9f 93       	push	r25
    234e:	af 93       	push	r26
    2350:	bf 93       	push	r27
    2352:	ef 93       	push	r30
    2354:	ff 93       	push	r31
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	80 91 a0 00 	lds	r24, 0x00A0
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	80 93 a0 00 	sts	0x00A0, r24
	 if(flag2==2)
    2368:	80 91 a0 00 	lds	r24, 0x00A0
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	59 f4       	brne	.+22     	; 0x2386 <__vector_7+0x52>
	 {
	  		 if(g_callBackPtr1 != NULL)
    2370:	80 91 9d 00 	lds	r24, 0x009D
    2374:	90 91 9e 00 	lds	r25, 0x009E
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	29 f0       	breq	.+10     	; 0x2386 <__vector_7+0x52>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    237c:	e0 91 9d 00 	lds	r30, 0x009D
    2380:	f0 91 9e 00 	lds	r31, 0x009E
    2384:	09 95       	icall
	  		 		}
	 }
 }
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	bf 91       	pop	r27
    2390:	af 91       	pop	r26
    2392:	9f 91       	pop	r25
    2394:	8f 91       	pop	r24
    2396:	7f 91       	pop	r23
    2398:	6f 91       	pop	r22
    239a:	5f 91       	pop	r21
    239c:	4f 91       	pop	r20
    239e:	3f 91       	pop	r19
    23a0:	2f 91       	pop	r18
    23a2:	0f 90       	pop	r0
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	0f 90       	pop	r0
    23a8:	1f 90       	pop	r1
    23aa:	18 95       	reti

000023ac <timer_init>:



 //////////////////////////////////////////////////
void timer_init (const TIMER_data *TIMER_DATA_Ptr)
{
    23ac:	0f 93       	push	r16
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <timer_init+0x8>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	SREG  |= (1<<7);
    23bc:	af e5       	ldi	r26, 0x5F	; 95
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ef e5       	ldi	r30, 0x5F	; 95
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 68       	ori	r24, 0x80	; 128
    23c8:	8c 93       	st	X, r24
if ( TIMER_DATA_Ptr->TIMER_num==timer0)
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	80 81       	ld	r24, Z
    23d0:	88 23       	and	r24, r24
    23d2:	c9 f5       	brne	.+114    	; 0x2446 <timer_init+0x9a>
{
	if( TIMER_DATA_Ptr->TIMER_mode==compare)
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	81 81       	ldd	r24, Z+1	; 0x01
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	99 f4       	brne	.+38     	; 0x2404 <timer_init+0x58>
	{
		timer0_init_CTC_mode( TIMER_DATA_Ptr->TIMER_compareValue_a, TIMER_DATA_Ptr->initial_value, TIMER_DATA_Ptr->TIMER_prescaler);
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	86 81       	ldd	r24, Z+6	; 0x06
    23e4:	97 81       	ldd	r25, Z+7	; 0x07
    23e6:	38 2f       	mov	r19, r24
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	84 81       	ldd	r24, Z+4	; 0x04
    23ee:	95 81       	ldd	r25, Z+5	; 0x05
    23f0:	28 2f       	mov	r18, r24
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	83 2f       	mov	r24, r19
    23fa:	62 2f       	mov	r22, r18
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 85 12 	call	0x250a	; 0x250a <timer0_init_CTC_mode>
    2402:	57 c0       	rjmp	.+174    	; 0x24b2 <timer_init+0x106>
	}
	else if ( TIMER_DATA_Ptr->TIMER_mode==normal)
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	88 23       	and	r24, r24
    240c:	59 f4       	brne	.+22     	; 0x2424 <timer_init+0x78>
	{
		timer0_init_normal_mode( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    240e:	e9 81       	ldd	r30, Y+1	; 0x01
    2410:	fa 81       	ldd	r31, Y+2	; 0x02
    2412:	84 81       	ldd	r24, Z+4	; 0x04
    2414:	95 81       	ldd	r25, Z+5	; 0x05
    2416:	e9 81       	ldd	r30, Y+1	; 0x01
    2418:	fa 81       	ldd	r31, Y+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	69 2f       	mov	r22, r25
    241e:	0e 94 5f 12 	call	0x24be	; 0x24be <timer0_init_normal_mode>
    2422:	47 c0       	rjmp	.+142    	; 0x24b2 <timer_init+0x106>
	}
	else if( TIMER_DATA_Ptr->TIMER_mode==SquareWave)
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	81 81       	ldd	r24, Z+1	; 0x01
    242a:	82 30       	cpi	r24, 0x02	; 2
    242c:	09 f0       	breq	.+2      	; 0x2430 <timer_init+0x84>
    242e:	41 c0       	rjmp	.+130    	; 0x24b2 <timer_init+0x106>
		{
		Timer0_CTC_Square_Wave_Init( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	84 81       	ldd	r24, Z+4	; 0x04
    2436:	95 81       	ldd	r25, Z+5	; 0x05
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	69 2f       	mov	r22, r25
    2440:	0e 94 ae 12 	call	0x255c	; 0x255c <Timer0_CTC_Square_Wave_Init>
    2444:	36 c0       	rjmp	.+108    	; 0x24b2 <timer_init+0x106>
		}
}
////////////////////////////////////////////////////////////
	else if ( TIMER_DATA_Ptr->TIMER_num==timer1)
    2446:	e9 81       	ldd	r30, Y+1	; 0x01
    2448:	fa 81       	ldd	r31, Y+2	; 0x02
    244a:	80 81       	ld	r24, Z
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	89 f5       	brne	.+98     	; 0x24b2 <timer_init+0x106>
	{
		if( TIMER_DATA_Ptr->TIMER_mode==compare)
    2450:	e9 81       	ldd	r30, Y+1	; 0x01
    2452:	fa 81       	ldd	r31, Y+2	; 0x02
    2454:	81 81       	ldd	r24, Z+1	; 0x01
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	e9 f4       	brne	.+58     	; 0x2494 <timer_init+0xe8>
		{
			Timer1_init_compare_Mode( TIMER_DATA_Ptr->TIMER_compareValue_a, TIMER_DATA_Ptr->TIMER_compareValue_b, TIMER_DATA_Ptr->initial_value, TIMER_DATA_Ptr->channel, TIMER_DATA_Ptr->TIMER_prescaler);
    245a:	e9 81       	ldd	r30, Y+1	; 0x01
    245c:	fa 81       	ldd	r31, Y+2	; 0x02
    245e:	86 81       	ldd	r24, Z+6	; 0x06
    2460:	97 81       	ldd	r25, Z+7	; 0x07
    2462:	48 2f       	mov	r20, r24
    2464:	e9 81       	ldd	r30, Y+1	; 0x01
    2466:	fa 81       	ldd	r31, Y+2	; 0x02
    2468:	80 85       	ldd	r24, Z+8	; 0x08
    246a:	91 85       	ldd	r25, Z+9	; 0x09
    246c:	28 2f       	mov	r18, r24
    246e:	e9 81       	ldd	r30, Y+1	; 0x01
    2470:	fa 81       	ldd	r31, Y+2	; 0x02
    2472:	84 81       	ldd	r24, Z+4	; 0x04
    2474:	95 81       	ldd	r25, Z+5	; 0x05
    2476:	38 2f       	mov	r19, r24
    2478:	e9 81       	ldd	r30, Y+1	; 0x01
    247a:	fa 81       	ldd	r31, Y+2	; 0x02
    247c:	52 81       	ldd	r21, Z+2	; 0x02
    247e:	e9 81       	ldd	r30, Y+1	; 0x01
    2480:	fa 81       	ldd	r31, Y+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	84 2f       	mov	r24, r20
    2486:	62 2f       	mov	r22, r18
    2488:	43 2f       	mov	r20, r19
    248a:	25 2f       	mov	r18, r21
    248c:	09 2f       	mov	r16, r25
    248e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <Timer1_init_compare_Mode>
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <timer_init+0x106>

		}
		else if( TIMER_DATA_Ptr->TIMER_mode==normal)
    2494:	e9 81       	ldd	r30, Y+1	; 0x01
    2496:	fa 81       	ldd	r31, Y+2	; 0x02
    2498:	81 81       	ldd	r24, Z+1	; 0x01
    249a:	88 23       	and	r24, r24
    249c:	51 f4       	brne	.+20     	; 0x24b2 <timer_init+0x106>
		{
			Timer1_init_Normal_Mode( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    249e:	e9 81       	ldd	r30, Y+1	; 0x01
    24a0:	fa 81       	ldd	r31, Y+2	; 0x02
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
    24a4:	95 81       	ldd	r25, Z+5	; 0x05
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	69 2f       	mov	r22, r25
    24ae:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <Timer1_init_Normal_Mode>
//oca ocb double compare buffer Two Independent Output Compare Units
// Double Buffered Output Compare Registers
//Four Independent Interrupt Sources (TOV1, OCF1A, OCF1B, and ICF1)
//to the value stored in the OCR1A or ICR1 register.

}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	0f 91       	pop	r16
    24bc:	08 95       	ret

000024be <timer0_init_normal_mode>:

void timer0_init_normal_mode(uint8 initial_value,uint8 prescaler)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <timer0_init_normal_mode+0x6>
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value; //Set Timer initial value to 0
    24cc:	e2 e5       	ldi	r30, 0x52	; 82
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    24d4:	a9 e5       	ldi	r26, 0x59	; 89
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e9 e5       	ldi	r30, 0x59	; 89
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	81 60       	ori	r24, 0x01	; 1
    24e0:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    24e2:	e3 e5       	ldi	r30, 0x53	; 83
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	85 e8       	ldi	r24, 0x85	; 133
    24e8:	80 83       	st	Z, r24
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    24ea:	a3 e5       	ldi	r26, 0x53	; 83
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e3 e5       	ldi	r30, 0x53	; 83
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	98 2f       	mov	r25, r24
    24f6:	98 7f       	andi	r25, 0xF8	; 248
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	87 70       	andi	r24, 0x07	; 7
    24fc:	89 2b       	or	r24, r25
    24fe:	8c 93       	st	X, r24
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <timer0_init_CTC_mode>:



void timer0_init_CTC_mode(uint8 compare_value,uint8 initial_value,uint8 prescaler)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	00 d0       	rcall	.+0      	; 0x2510 <timer0_init_CTC_mode+0x6>
    2510:	0f 92       	push	r0
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	6a 83       	std	Y+2, r22	; 0x02
    251a:	4b 83       	std	Y+3, r20	; 0x03
	TCNT0 = initial_value;    // Set Timer initial value to 0
    251c:	e2 e5       	ldi	r30, 0x52	; 82
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	80 83       	st	Z, r24
	OCR0  = compare_value; // Set Compare Value
    2524:	ec e5       	ldi	r30, 0x5C	; 92
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    252c:	a9 e5       	ldi	r26, 0x59	; 89
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e9 e5       	ldi	r30, 0x59	; 89
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	82 60       	ori	r24, 0x02	; 2
    2538:	8c 93       	st	X, r24
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    253a:	a3 e5       	ldi	r26, 0x53	; 83
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e3 e5       	ldi	r30, 0x53	; 83
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	98 2f       	mov	r25, r24
    2546:	98 7f       	andi	r25, 0xF8	; 248
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	87 70       	andi	r24, 0x07	; 7
    254c:	89 2b       	or	r24, r25
    254e:	8c 93       	st	X, r24
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <Timer0_CTC_Square_Wave_Init>:


void Timer0_CTC_Square_Wave_Init(uint8 initial_value,uint8 prescaler)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <Timer0_CTC_Square_Wave_Init+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value;  // Set Initial Value to 0
    256a:	e2 e5       	ldi	r30, 0x52	; 82
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	80 83       	st	Z, r24
	OCR0 = 250; // Set Compare Value
    2572:	ec e5       	ldi	r30, 0x5C	; 92
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	8a ef       	ldi	r24, 0xFA	; 250
    2578:	80 83       	st	Z, r24
	DDRB = DDRB | (1<<PB3); // Configure PB3/OC0 Pin as output pin
    257a:	a7 e3       	ldi	r26, 0x37	; 55
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e7 e3       	ldi	r30, 0x37	; 55
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	88 60       	ori	r24, 0x08	; 8
    2586:	8c 93       	st	X, r24
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. Toggle OC0 on compare match COM00=1 & COM01=0
	 * 4. clock = CPU clock CS00=1 CS01=0 CS02=0
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (1<<CS00);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    2588:	a3 e5       	ldi	r26, 0x53	; 83
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e3 e5       	ldi	r30, 0x53	; 83
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	98 2f       	mov	r25, r24
    2594:	98 7f       	andi	r25, 0xF8	; 248
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	87 70       	andi	r24, 0x07	; 7
    259a:	89 2b       	or	r24, r25
    259c:	8c 93       	st	X, r24


}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <Timer1_init_Normal_Mode>:

void Timer1_init_Normal_Mode(uint8 initial_value,uint8 prescaler)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <Timer1_init_Normal_Mode+0x6>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value; // Set Timer initial value to 0
    25b6:	e2 e5       	ldi	r30, 0x52	; 82
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	80 83       	st	Z, r24
	TIMSK = (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    25be:	e9 e5       	ldi	r30, 0x59	; 89
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 83       	st	Z, r24
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/prescaler CS00=0 CS01=0 CS02=1
	 */
	//TCCR0 = (1<<FOC0) | (1<<CS02);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    25c6:	a3 e5       	ldi	r26, 0x53	; 83
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e3 e5       	ldi	r30, 0x53	; 83
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	98 2f       	mov	r25, r24
    25d2:	98 7f       	andi	r25, 0xF8	; 248
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	87 70       	andi	r24, 0x07	; 7
    25d8:	89 2b       	or	r24, r25
    25da:	8c 93       	st	X, r24
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <Timer1_init_compare_Mode>:
void Timer1_init_compare_Mode(uint8 compare_value_a,uint8 compare_value_b,uint8 initial_value,uint8 channel,uint8 prescaler)
{
    25e6:	0f 93       	push	r16
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <Timer1_init_compare_Mode+0x8>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <Timer1_init_compare_Mode+0xa>
    25f0:	0f 92       	push	r0
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	6a 83       	std	Y+2, r22	; 0x02
    25fa:	4b 83       	std	Y+3, r20	; 0x03
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	0d 83       	std	Y+5, r16	; 0x05
	TCNT1  =0;												//INITIAL VALUE
	//OCR1A  =976;											//TOP VALUE TO COMPARE WITH
	OCR1A=top_value;
	OCR1B=top_value2;*/
	///////////////////////////
	if ((channel) == 0)
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	88 23       	and	r24, r24
    2604:	71 f5       	brne	.+92     	; 0x2662 <Timer1_init_compare_Mode+0x7c>
			{

				SET_BIT (TCCR1A,FOC1A);
    2606:	af e4       	ldi	r26, 0x4F	; 79
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ef e4       	ldi	r30, 0x4F	; 79
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	88 60       	ori	r24, 0x08	; 8
    2612:	8c 93       	st	X, r24


				SET_BIT (TCCR1B,WGM12);
    2614:	ae e4       	ldi	r26, 0x4E	; 78
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ee e4       	ldi	r30, 0x4E	; 78
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	88 60       	ori	r24, 0x08	; 8
    2620:	8c 93       	st	X, r24

				TCCR1B = ((TCCR1B & 0xF8) | (prescaler & 0x7));
    2622:	ae e4       	ldi	r26, 0x4E	; 78
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	ee e4       	ldi	r30, 0x4E	; 78
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	98 2f       	mov	r25, r24
    262e:	98 7f       	andi	r25, 0xF8	; 248
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	87 70       	andi	r24, 0x07	; 7
    2634:	89 2b       	or	r24, r25
    2636:	8c 93       	st	X, r24

				TCNT1 = initial_value;
    2638:	ec e4       	ldi	r30, 0x4C	; 76
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24

				OCR1A =compare_value_a;//78125//10sec//
    2646:	ea e4       	ldi	r30, 0x4A	; 74
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24

				SET_BIT (TIMSK,OCIE1A);
    2654:	a9 e5       	ldi	r26, 0x59	; 89
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e9 e5       	ldi	r30, 0x59	; 89
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	80 61       	ori	r24, 0x10	; 16
    2660:	8c 93       	st	X, r24
			}
			if ((channel) == 1)
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	71 f5       	brne	.+92     	; 0x26c4 <Timer1_init_compare_Mode+0xde>
			{
				SET_BIT (TCCR1A,FOC1B);
    2668:	af e4       	ldi	r26, 0x4F	; 79
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ef e4       	ldi	r30, 0x4F	; 79
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	84 60       	ori	r24, 0x04	; 4
    2674:	8c 93       	st	X, r24

				SET_BIT (TCCR1B,WGM12);
    2676:	ae e4       	ldi	r26, 0x4E	; 78
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ee e4       	ldi	r30, 0x4E	; 78
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	88 60       	ori	r24, 0x08	; 8
    2682:	8c 93       	st	X, r24

				TCCR1B = ((TCCR1B & 0xF8) | (prescaler & 0x7));
    2684:	ae e4       	ldi	r26, 0x4E	; 78
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ee e4       	ldi	r30, 0x4E	; 78
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	98 2f       	mov	r25, r24
    2690:	98 7f       	andi	r25, 0xF8	; 248
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	87 70       	andi	r24, 0x07	; 7
    2696:	89 2b       	or	r24, r25
    2698:	8c 93       	st	X, r24

				TCNT1 =initial_value;
    269a:	ec e4       	ldi	r30, 0x4C	; 76
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24

				OCR1B =compare_value_b;//1 min//468750
    26a8:	e8 e4       	ldi	r30, 0x48	; 72
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24

				SET_BIT (TIMSK,OCIE1B);
    26b6:	a9 e5       	ldi	r26, 0x59	; 89
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e9 e5       	ldi	r30, 0x59	; 89
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	88 60       	ori	r24, 0x08	; 8
    26c2:	8c 93       	st	X, r24
			}
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <TIMER0_setCallBack>:




void TIMER0_setCallBack(void(*a_ptr)(void))
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <TIMER0_setCallBack+0x6>
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	90 93 9c 00 	sts	0x009C, r25
    26ec:	80 93 9b 00 	sts	0x009B, r24
}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <TIMER1_setCallBack>:


void TIMER1_setCallBack(void(*a_ptr)(void))
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <TIMER1_setCallBack+0x6>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	90 93 9e 00 	sts	0x009E, r25
    2710:	80 93 9d 00 	sts	0x009D, r24
}
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <TIMER0_stop>:




void TIMER0_stop (void)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2726:	e3 e5       	ldi	r30, 0x53	; 83
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	10 82       	st	Z, r1
	CLEAR_BIT (TIMSK,OCIE0);
    272c:	a9 e5       	ldi	r26, 0x59	; 89
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e9 e5       	ldi	r30, 0x59	; 89
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8d 7f       	andi	r24, 0xFD	; 253
    2738:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,TOIE0);
    273a:	a9 e5       	ldi	r26, 0x59	; 89
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e9 e5       	ldi	r30, 0x59	; 89
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8e 7f       	andi	r24, 0xFE	; 254
    2746:	8c 93       	st	X, r24
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <TIMER1_stop>:
/////////////////////////////////////
void TIMER1_stop (void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	10 82       	st	Z, r1
	TCCR1B = 0;
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	10 82       	st	Z, r1
	OCR1A = 0;
    2762:	ea e4       	ldi	r30, 0x4A	; 74
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	11 82       	std	Z+1, r1	; 0x01
    2768:	10 82       	st	Z, r1
	CLEAR_BIT (TIMSK,OCIE1A);
    276a:	a9 e5       	ldi	r26, 0x59	; 89
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e9 e5       	ldi	r30, 0x59	; 89
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8f 7e       	andi	r24, 0xEF	; 239
    2776:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,TOIE1);
    2778:	a9 e5       	ldi	r26, 0x59	; 89
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e9 e5       	ldi	r30, 0x59	; 89
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	8b 7f       	andi	r24, 0xFB	; 251
    2784:	8c 93       	st	X, r24
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2794:	eb e2       	ldi	r30, 0x2B	; 43
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    279c:	ea e2       	ldi	r30, 0x2A	; 42
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	88 e1       	ldi	r24, 0x18	; 24
    27a2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    27a4:	e0 e4       	ldi	r30, 0x40	; 64
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	86 e8       	ldi	r24, 0x86	; 134
    27aa:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    27ac:	e0 e4       	ldi	r30, 0x40	; 64
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    27b2:	e9 e2       	ldi	r30, 0x29	; 41
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	8c e0       	ldi	r24, 0x0C	; 12
    27b8:	80 83       	st	Z, r24
}
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27cc:	eb e2       	ldi	r30, 0x2B	; 43
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	80 72       	andi	r24, 0x20	; 32
    27d8:	90 70       	andi	r25, 0x00	; 0
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	b9 f3       	breq	.-18     	; 0x27cc <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    27de:	ec e2       	ldi	r30, 0x2C	; 44
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27f6:	eb e2       	ldi	r30, 0x2B	; 43
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	88 23       	and	r24, r24
    27fe:	dc f7       	brge	.-10     	; 0x27f6 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2800:	ec e2       	ldi	r30, 0x2C	; 44
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <UART_sendString+0x6>
    2812:	0f 92       	push	r0
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	9b 83       	std	Y+3, r25	; 0x03
    281a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    281c:	19 82       	std	Y+1, r1	; 0x01
    281e:	0e c0       	rjmp	.+28     	; 0x283c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	fc 01       	movw	r30, r24
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	80 81       	ld	r24, Z
    2832:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <UART_sendByte>
		i++;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	9b 81       	ldd	r25, Y+3	; 0x03
    2846:	fc 01       	movw	r30, r24
    2848:	e2 0f       	add	r30, r18
    284a:	f3 1f       	adc	r31, r19
    284c:	80 81       	ld	r24, Z
    284e:	88 23       	and	r24, r24
    2850:	39 f7       	brne	.-50     	; 0x2820 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <UART_receiveString+0xa>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2872:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	8c 01       	movw	r16, r24
    2880:	02 0f       	add	r16, r18
    2882:	13 1f       	adc	r17, r19
    2884:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	8c 01       	movw	r16, r24
    28a0:	02 0f       	add	r16, r18
    28a2:	13 1f       	adc	r17, r19
    28a4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_recieveByte>
    28a8:	f8 01       	movw	r30, r16
    28aa:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	fc 01       	movw	r30, r24
    28b8:	e2 0f       	add	r30, r18
    28ba:	f3 1f       	adc	r31, r19
    28bc:	80 81       	ld	r24, Z
    28be:	83 32       	cpi	r24, 0x23	; 35
    28c0:	31 f7       	brne	.-52     	; 0x288e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	10 82       	st	Z, r1
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	08 95       	ret

000028e4 <__prologue_saves__>:
    28e4:	2f 92       	push	r2
    28e6:	3f 92       	push	r3
    28e8:	4f 92       	push	r4
    28ea:	5f 92       	push	r5
    28ec:	6f 92       	push	r6
    28ee:	7f 92       	push	r7
    28f0:	8f 92       	push	r8
    28f2:	9f 92       	push	r9
    28f4:	af 92       	push	r10
    28f6:	bf 92       	push	r11
    28f8:	cf 92       	push	r12
    28fa:	df 92       	push	r13
    28fc:	ef 92       	push	r14
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	ca 1b       	sub	r28, r26
    290e:	db 0b       	sbc	r29, r27
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	09 94       	ijmp

0000291c <__epilogue_restores__>:
    291c:	2a 88       	ldd	r2, Y+18	; 0x12
    291e:	39 88       	ldd	r3, Y+17	; 0x11
    2920:	48 88       	ldd	r4, Y+16	; 0x10
    2922:	5f 84       	ldd	r5, Y+15	; 0x0f
    2924:	6e 84       	ldd	r6, Y+14	; 0x0e
    2926:	7d 84       	ldd	r7, Y+13	; 0x0d
    2928:	8c 84       	ldd	r8, Y+12	; 0x0c
    292a:	9b 84       	ldd	r9, Y+11	; 0x0b
    292c:	aa 84       	ldd	r10, Y+10	; 0x0a
    292e:	b9 84       	ldd	r11, Y+9	; 0x09
    2930:	c8 84       	ldd	r12, Y+8	; 0x08
    2932:	df 80       	ldd	r13, Y+7	; 0x07
    2934:	ee 80       	ldd	r14, Y+6	; 0x06
    2936:	fd 80       	ldd	r15, Y+5	; 0x05
    2938:	0c 81       	ldd	r16, Y+4	; 0x04
    293a:	1b 81       	ldd	r17, Y+3	; 0x03
    293c:	aa 81       	ldd	r26, Y+2	; 0x02
    293e:	b9 81       	ldd	r27, Y+1	; 0x01
    2940:	ce 0f       	add	r28, r30
    2942:	d1 1d       	adc	r29, r1
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	ed 01       	movw	r28, r26
    2950:	08 95       	ret

00002952 <strcmp>:
    2952:	fb 01       	movw	r30, r22
    2954:	dc 01       	movw	r26, r24
    2956:	8d 91       	ld	r24, X+
    2958:	01 90       	ld	r0, Z+
    295a:	80 19       	sub	r24, r0
    295c:	01 10       	cpse	r0, r1
    295e:	d9 f3       	breq	.-10     	; 0x2956 <strcmp+0x4>
    2960:	99 0b       	sbc	r25, r25
    2962:	08 95       	ret

00002964 <itoa>:
    2964:	fb 01       	movw	r30, r22
    2966:	9f 01       	movw	r18, r30
    2968:	e8 94       	clt
    296a:	42 30       	cpi	r20, 0x02	; 2
    296c:	c4 f0       	brlt	.+48     	; 0x299e <itoa+0x3a>
    296e:	45 32       	cpi	r20, 0x25	; 37
    2970:	b4 f4       	brge	.+44     	; 0x299e <itoa+0x3a>
    2972:	4a 30       	cpi	r20, 0x0A	; 10
    2974:	29 f4       	brne	.+10     	; 0x2980 <itoa+0x1c>
    2976:	97 fb       	bst	r25, 7
    2978:	1e f4       	brtc	.+6      	; 0x2980 <itoa+0x1c>
    297a:	90 95       	com	r25
    297c:	81 95       	neg	r24
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	64 2f       	mov	r22, r20
    2982:	77 27       	eor	r23, r23
    2984:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__udivmodhi4>
    2988:	80 5d       	subi	r24, 0xD0	; 208
    298a:	8a 33       	cpi	r24, 0x3A	; 58
    298c:	0c f0       	brlt	.+2      	; 0x2990 <itoa+0x2c>
    298e:	89 5d       	subi	r24, 0xD9	; 217
    2990:	81 93       	st	Z+, r24
    2992:	cb 01       	movw	r24, r22
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	a1 f7       	brne	.-24     	; 0x2980 <itoa+0x1c>
    2998:	16 f4       	brtc	.+4      	; 0x299e <itoa+0x3a>
    299a:	5d e2       	ldi	r21, 0x2D	; 45
    299c:	51 93       	st	Z+, r21
    299e:	10 82       	st	Z, r1
    29a0:	c9 01       	movw	r24, r18
    29a2:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <strrev>

000029a6 <strrev>:
    29a6:	dc 01       	movw	r26, r24
    29a8:	fc 01       	movw	r30, r24
    29aa:	67 2f       	mov	r22, r23
    29ac:	71 91       	ld	r23, Z+
    29ae:	77 23       	and	r23, r23
    29b0:	e1 f7       	brne	.-8      	; 0x29aa <strrev+0x4>
    29b2:	32 97       	sbiw	r30, 0x02	; 2
    29b4:	04 c0       	rjmp	.+8      	; 0x29be <strrev+0x18>
    29b6:	7c 91       	ld	r23, X
    29b8:	6d 93       	st	X+, r22
    29ba:	70 83       	st	Z, r23
    29bc:	62 91       	ld	r22, -Z
    29be:	ae 17       	cp	r26, r30
    29c0:	bf 07       	cpc	r27, r31
    29c2:	c8 f3       	brcs	.-14     	; 0x29b6 <strrev+0x10>
    29c4:	08 95       	ret

000029c6 <__udivmodhi4>:
    29c6:	aa 1b       	sub	r26, r26
    29c8:	bb 1b       	sub	r27, r27
    29ca:	51 e1       	ldi	r21, 0x11	; 17
    29cc:	07 c0       	rjmp	.+14     	; 0x29dc <__udivmodhi4_ep>

000029ce <__udivmodhi4_loop>:
    29ce:	aa 1f       	adc	r26, r26
    29d0:	bb 1f       	adc	r27, r27
    29d2:	a6 17       	cp	r26, r22
    29d4:	b7 07       	cpc	r27, r23
    29d6:	10 f0       	brcs	.+4      	; 0x29dc <__udivmodhi4_ep>
    29d8:	a6 1b       	sub	r26, r22
    29da:	b7 0b       	sbc	r27, r23

000029dc <__udivmodhi4_ep>:
    29dc:	88 1f       	adc	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	5a 95       	dec	r21
    29e2:	a9 f7       	brne	.-22     	; 0x29ce <__udivmodhi4_loop>
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	08 95       	ret

000029ee <_exit>:
    29ee:	f8 94       	cli

000029f0 <__stop_program>:
    29f0:	ff cf       	rjmp	.-2      	; 0x29f0 <__stop_program>
