
interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00002aec  00002b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000f0  008000f0  00002c10  2**0
                  ALLOC
  3 .stab         00002e5c  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f9  00000000  00000000  00005a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aaf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__vector_6>
      1c:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__vector_7>
      20:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 09 	call	0x1206	; 0x1206 <main>
      8a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <set_password>:

#include "string.h"


void set_password(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ae 97       	sbiw	r28, 0x2e	; 46
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password1[7];
	uint8 check=0;
     b5e:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 j,k ;
	uint8 password2[7];

	LCD_displayString(" new password : ");
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>

	LCD_goToRowColumn(1,0);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>

	for (i=0;i<5;i++)
     b70:	18 a2       	std	Y+32, r1	; 0x20
     b72:	8e c0       	rjmp	.+284    	; 0xc90 <set_password+0x14a>
	{
		password1[i] = KeyPad_getPressedKey(); //get the pressed key
     b74:	88 a1       	ldd	r24, Y+32	; 0x20
     b76:	08 2f       	mov	r16, r24
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <KeyPad_getPressedKey>
     b7e:	28 2f       	mov	r18, r24
     b80:	ce 01       	movw	r24, r28
     b82:	81 96       	adiw	r24, 0x21	; 33
     b84:	fc 01       	movw	r30, r24
     b86:	e0 0f       	add	r30, r16
     b88:	f1 1f       	adc	r31, r17
     b8a:	20 83       	st	Z, r18
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	aa ef       	ldi	r26, 0xFA	; 250
     b92:	b4 e4       	ldi	r27, 0x44	; 68
     b94:	89 8f       	std	Y+25, r24	; 0x19
     b96:	9a 8f       	std	Y+26, r25	; 0x1a
     b98:	ab 8f       	std	Y+27, r26	; 0x1b
     b9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9c:	69 8d       	ldd	r22, Y+25	; 0x19
     b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	4a e7       	ldi	r20, 0x7A	; 122
     baa:	53 e4       	ldi	r21, 0x43	; 67
     bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	8d 8b       	std	Y+21, r24	; 0x15
     bb6:	9e 8b       	std	Y+22, r25	; 0x16
     bb8:	af 8b       	std	Y+23, r26	; 0x17
     bba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bbc:	6d 89       	ldd	r22, Y+21	; 0x15
     bbe:	7e 89       	ldd	r23, Y+22	; 0x16
     bc0:	8f 89       	ldd	r24, Y+23	; 0x17
     bc2:	98 8d       	ldd	r25, Y+24	; 0x18
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e8       	ldi	r20, 0x80	; 128
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd0:	88 23       	and	r24, r24
     bd2:	2c f4       	brge	.+10     	; 0xbde <set_password+0x98>
		__ticks = 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9c 8b       	std	Y+20, r25	; 0x14
     bda:	8b 8b       	std	Y+19, r24	; 0x13
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <set_password+0x116>
	else if (__tmp > 65535)
     bde:	6d 89       	ldd	r22, Y+21	; 0x15
     be0:	7e 89       	ldd	r23, Y+22	; 0x16
     be2:	8f 89       	ldd	r24, Y+23	; 0x17
     be4:	98 8d       	ldd	r25, Y+24	; 0x18
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	57 e4       	ldi	r21, 0x47	; 71
     bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	4c f5       	brge	.+82     	; 0xc48 <set_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf6:	69 8d       	ldd	r22, Y+25	; 0x19
     bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e2       	ldi	r20, 0x20	; 32
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	9c 8b       	std	Y+20, r25	; 0x14
     c1c:	8b 8b       	std	Y+19, r24	; 0x13
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <set_password+0xf8>
     c20:	89 e1       	ldi	r24, 0x19	; 25
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9a 8b       	std	Y+18, r25	; 0x12
     c26:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c28:	89 89       	ldd	r24, Y+17	; 0x11
     c2a:	9a 89       	ldd	r25, Y+18	; 0x12
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <set_password+0xe6>
     c30:	9a 8b       	std	Y+18, r25	; 0x12
     c32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	8b 89       	ldd	r24, Y+19	; 0x13
     c36:	9c 89       	ldd	r25, Y+20	; 0x14
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	9c 8b       	std	Y+20, r25	; 0x14
     c3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3e:	8b 89       	ldd	r24, Y+19	; 0x13
     c40:	9c 89       	ldd	r25, Y+20	; 0x14
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	69 f7       	brne	.-38     	; 0xc20 <set_password+0xda>
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <set_password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c48:	6d 89       	ldd	r22, Y+21	; 0x15
     c4a:	7e 89       	ldd	r23, Y+22	; 0x16
     c4c:	8f 89       	ldd	r24, Y+23	; 0x17
     c4e:	98 8d       	ldd	r25, Y+24	; 0x18
     c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9c 8b       	std	Y+20, r25	; 0x14
     c5a:	8b 8b       	std	Y+19, r24	; 0x13
     c5c:	8b 89       	ldd	r24, Y+19	; 0x13
     c5e:	9c 89       	ldd	r25, Y+20	; 0x14
     c60:	98 8b       	std	Y+16, r25	; 0x10
     c62:	8f 87       	std	Y+15, r24	; 0x0f
     c64:	8f 85       	ldd	r24, Y+15	; 0x0f
     c66:	98 89       	ldd	r25, Y+16	; 0x10
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <set_password+0x122>
     c6c:	98 8b       	std	Y+16, r25	; 0x10
     c6e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		//LCD_displayCharacter( KeyPad_getPressedKey());
		LCD_intgerToString( password1[i]);
     c70:	88 a1       	ldd	r24, Y+32	; 0x20
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	ce 01       	movw	r24, r28
     c78:	81 96       	adiw	r24, 0x21	; 33
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	80 81       	ld	r24, Z
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>

	LCD_displayString(" new password : ");

	LCD_goToRowColumn(1,0);

	for (i=0;i<5;i++)
     c8a:	88 a1       	ldd	r24, Y+32	; 0x20
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	88 a3       	std	Y+32, r24	; 0x20
     c90:	88 a1       	ldd	r24, Y+32	; 0x20
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	08 f4       	brcc	.+2      	; 0xc98 <set_password+0x152>
     c96:	6e cf       	rjmp	.-292    	; 0xb74 <set_password+0x2e>
		_delay_ms(2000);
		//LCD_displayCharacter( KeyPad_getPressedKey());
		LCD_intgerToString( password1[i]);
	}

	LCD_clearScreen();
     c98:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
	//_delay_ms(100);

	LCD_displayString("repeat password : ");
     c9c:	81 e7       	ldi	r24, 0x71	; 113
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
	LCD_goToRowColumn(1,0);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>

	for (j=0;j<5;j++)
     cac:	1e 8e       	std	Y+30, r1	; 0x1e
     cae:	8e c0       	rjmp	.+284    	; 0xdcc <set_password+0x286>
	{
		password2[j] = KeyPad_getPressedKey(); //get the pressed key
     cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb2:	08 2f       	mov	r16, r24
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <KeyPad_getPressedKey>
     cba:	28 2f       	mov	r18, r24
     cbc:	ce 01       	movw	r24, r28
     cbe:	88 96       	adiw	r24, 0x28	; 40
     cc0:	fc 01       	movw	r30, r24
     cc2:	e0 0f       	add	r30, r16
     cc4:	f1 1f       	adc	r31, r17
     cc6:	20 83       	st	Z, r18
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	aa ef       	ldi	r26, 0xFA	; 250
     cce:	b4 e4       	ldi	r27, 0x44	; 68
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
     cd2:	9c 87       	std	Y+12, r25	; 0x0c
     cd4:	ad 87       	std	Y+13, r26	; 0x0d
     cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cda:	7c 85       	ldd	r23, Y+12	; 0x0c
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	53 e4       	ldi	r21, 0x43	; 67
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	98 87       	std	Y+8, r25	; 0x08
     cf4:	a9 87       	std	Y+9, r26	; 0x09
     cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <set_password+0x1d4>
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <set_password+0x252>
	else if (__tmp > 65535)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d2e:	18 16       	cp	r1, r24
     d30:	4c f5       	brge	.+82     	; 0xd84 <set_password+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d32:	6b 85       	ldd	r22, Y+11	; 0x0b
     d34:	7c 85       	ldd	r23, Y+12	; 0x0c
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	0f c0       	rjmp	.+30     	; 0xd7a <set_password+0x234>
     d5c:	89 e1       	ldi	r24, 0x19	; 25
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <set_password+0x222>
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f7       	brne	.-38     	; 0xd5c <set_password+0x216>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <set_password+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <set_password+0x25e>
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);				//LCD_displayCharacter( KeyPad_getPressedKey());
		LCD_intgerToString( password2[j]);
     dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	ce 01       	movw	r24, r28
     db4:	88 96       	adiw	r24, 0x28	; 40
     db6:	fc 01       	movw	r30, r24
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	80 81       	ld	r24, Z
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>
	//_delay_ms(100);

	LCD_displayString("repeat password : ");
	LCD_goToRowColumn(1,0);

	for (j=0;j<5;j++)
     dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8e 8f       	std	Y+30, r24	; 0x1e
     dcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <set_password+0x28e>
     dd2:	6e cf       	rjmp	.-292    	; 0xcb0 <set_password+0x16a>
		password2[j] = KeyPad_getPressedKey(); //get the pressed key
		_delay_ms(2000);				//LCD_displayCharacter( KeyPad_getPressedKey());
		LCD_intgerToString( password2[j]);
	}

	password1[5]='#';
     dd4:	83 e2       	ldi	r24, 0x23	; 35
     dd6:	8e a3       	std	Y+38, r24	; 0x26
	password1[6]='\0';
     dd8:	1f a2       	std	Y+39, r1	; 0x27
	password2[5]='#';
     dda:	83 e2       	ldi	r24, 0x23	; 35
     ddc:	8d a7       	std	Y+45, r24	; 0x2d
	password2[6]='\0';
     dde:	1e a6       	std	Y+46, r1	; 0x2e

	for(k=0;k<5;k++)
     de0:	1d 8e       	std	Y+29, r1	; 0x1d
     de2:	1a c0       	rjmp	.+52     	; 0xe18 <set_password+0x2d2>
	{
		if(password1[k]==password2[k])
     de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	ce 01       	movw	r24, r28
     dec:	81 96       	adiw	r24, 0x21	; 33
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	40 81       	ld	r20, Z
     df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	ce 01       	movw	r24, r28
     dfe:	88 96       	adiw	r24, 0x28	; 40
     e00:	fc 01       	movw	r30, r24
     e02:	e2 0f       	add	r30, r18
     e04:	f3 1f       	adc	r31, r19
     e06:	80 81       	ld	r24, Z
     e08:	48 17       	cp	r20, r24
     e0a:	19 f4       	brne	.+6      	; 0xe12 <set_password+0x2cc>
		{			check++;		}
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	8f 8f       	std	Y+31, r24	; 0x1f
	password1[5]='#';
	password1[6]='\0';
	password2[5]='#';
	password2[6]='\0';

	for(k=0;k<5;k++)
     e12:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	8d 8f       	std	Y+29, r24	; 0x1d
     e18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e1a:	85 30       	cpi	r24, 0x05	; 5
     e1c:	18 f3       	brcs	.-58     	; 0xde4 <set_password+0x29e>
	{
		if(password1[k]==password2[k])
		{			check++;		}
	}

	if (check == 5)
     e1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e20:	85 30       	cpi	r24, 0x05	; 5
     e22:	71 f4       	brne	.+28     	; 0xe40 <set_password+0x2fa>
		{
			//LCD_clearScreen();
			UART_sendByte (M2_READY);
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
			UART_sendString(password1); //send the pressed key to the second MC using uart
     e2a:	ce 01       	movw	r24, r28
     e2c:	81 96       	adiw	r24, 0x21	; 33
     e2e:	0e 94 8c 14 	call	0x2918	; 0x2918 <UART_sendString>
			UART_sendByte (true);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
			g_state= true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 f0 00 	sts	0x00F0, r24
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <set_password+0x30a>
		}

	else if (check != 5){	UART_sendByte (false);g_state= false;}
     e40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	29 f0       	breq	.+10     	; 0xe50 <set_password+0x30a>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
     e4c:	10 92 f0 00 	sts	0x00F0, r1
}
     e50:	ae 96       	adiw	r28, 0x2e	; 46
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <log_in>:
		}
	}
}*/
///////////////////////////////////////////////
uint8 log_in (void)
{
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	67 97       	sbiw	r28, 0x17	; 23
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password[7];
	uint8 check=0;
     e7e:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
     e80:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
	LCD_displayString("your password is: ");
     e84:	84 e8       	ldi	r24, 0x84	; 132
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>

	LCD_goToRowColumn(1,0);
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>

    for (i=0;i<5;i++)
     e94:	18 8a       	std	Y+16, r1	; 0x10
     e96:	8e c0       	rjmp	.+284    	; 0xfb4 <log_in+0x14e>
		{
			password[i] = KeyPad_getPressedKey(); //get the pressed key
     e98:	88 89       	ldd	r24, Y+16	; 0x10
     e9a:	08 2f       	mov	r16, r24
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <KeyPad_getPressedKey>
     ea2:	28 2f       	mov	r18, r24
     ea4:	ce 01       	movw	r24, r28
     ea6:	41 96       	adiw	r24, 0x11	; 17
     ea8:	fc 01       	movw	r30, r24
     eaa:	e0 0f       	add	r30, r16
     eac:	f1 1f       	adc	r31, r17
     eae:	20 83       	st	Z, r18
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	aa ef       	ldi	r26, 0xFA	; 250
     eb6:	b4 e4       	ldi	r27, 0x44	; 68
     eb8:	8b 87       	std	Y+11, r24	; 0x0b
     eba:	9c 87       	std	Y+12, r25	; 0x0c
     ebc:	ad 87       	std	Y+13, r26	; 0x0d
     ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	53 e4       	ldi	r21, 0x43	; 67
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8f 83       	std	Y+7, r24	; 0x07
     eda:	98 87       	std	Y+8, r25	; 0x08
     edc:	a9 87       	std	Y+9, r26	; 0x09
     ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	2c f4       	brge	.+10     	; 0xf02 <log_in+0x9c>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <log_in+0x11a>
	else if (__tmp > 65535)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	4c f5       	brge	.+82     	; 0xf6c <log_in+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <log_in+0xfc>
     f44:	89 e1       	ldi	r24, 0x19	; 25
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <log_in+0xea>
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	69 f7       	brne	.-38     	; 0xf44 <log_in+0xde>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <log_in+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <log_in+0x126>
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			//LCD_displayCharacter( KeyPad_getPressedKey());
			LCD_intgerToString( password[i]);
     f94:	88 89       	ldd	r24, Y+16	; 0x10
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	ce 01       	movw	r24, r28
     f9c:	41 96       	adiw	r24, 0x11	; 17
     f9e:	fc 01       	movw	r30, r24
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	80 81       	ld	r24, Z
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>
	LCD_clearScreen();
	LCD_displayString("your password is: ");

	LCD_goToRowColumn(1,0);

    for (i=0;i<5;i++)
     fae:	88 89       	ldd	r24, Y+16	; 0x10
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	88 8b       	std	Y+16, r24	; 0x10
     fb4:	88 89       	ldd	r24, Y+16	; 0x10
     fb6:	85 30       	cpi	r24, 0x05	; 5
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <log_in+0x156>
     fba:	6e cf       	rjmp	.-292    	; 0xe98 <log_in+0x32>
			_delay_ms(2000);
			//LCD_displayCharacter( KeyPad_getPressedKey());
			LCD_intgerToString( password[i]);
		}

	LCD_clearScreen();
     fbc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
	password[5]='#';
     fc0:	83 e2       	ldi	r24, 0x23	; 35
     fc2:	8e 8b       	std	Y+22, r24	; 0x16
	password[6]='\0';
     fc4:	1f 8a       	std	Y+23, r1	; 0x17


	UART_sendByte (M2_READY);
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
	UART_sendString(password); //send the pressed key to the second MC using uart
     fcc:	ce 01       	movw	r24, r28
     fce:	41 96       	adiw	r24, 0x11	; 17
     fd0:	0e 94 8c 14 	call	0x2918	; 0x2918 <UART_sendString>

	UART_sendByte (M2_READY);
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
	//while ((UART_recieveByte ()) != M2_READY);
	return (UART_recieveByte());
     fda:	0e 94 7d 14 	call	0x28fa	; 0x28fa <UART_recieveByte>
}
     fde:	67 96       	adiw	r28, 0x17	; 23
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <user_target>:


//////////////////////////////////////////////////
uint8 user_target (void)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	60 97       	sbiw	r28, 0x10	; 16
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	uint8 operation;
	operation = KeyPad_getPressedKey ();
    1008:	0e 94 bc 0b 	call	0x1778	; 0x1778 <KeyPad_getPressedKey>
    100c:	8f 87       	std	Y+15, r24	; 0x0f
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	aa ef       	ldi	r26, 0xFA	; 250
    1014:	b4 e4       	ldi	r27, 0x44	; 68
    1016:	8b 87       	std	Y+11, r24	; 0x0b
    1018:	9c 87       	std	Y+12, r25	; 0x0c
    101a:	ad 87       	std	Y+13, r26	; 0x0d
    101c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a e7       	ldi	r20, 0x7A	; 122
    102c:	53 e4       	ldi	r21, 0x43	; 67
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8f 83       	std	Y+7, r24	; 0x07
    1038:	98 87       	std	Y+8, r25	; 0x08
    103a:	a9 87       	std	Y+9, r26	; 0x09
    103c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    103e:	6f 81       	ldd	r22, Y+7	; 0x07
    1040:	78 85       	ldd	r23, Y+8	; 0x08
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	9a 85       	ldd	r25, Y+10	; 0x0a
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <user_target+0x6c>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	3f c0       	rjmp	.+126    	; 0x10de <user_target+0xea>
	else if (__tmp > 65535)
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <user_target+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <user_target+0xcc>
    10a2:	89 e1       	ldi	r24, 0x19	; 25
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 83       	std	Y+4, r25	; 0x04
    10a8:	8b 83       	std	Y+3, r24	; 0x03
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <user_target+0xba>
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <user_target+0xae>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <user_target+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6f 81       	ldd	r22, Y+7	; 0x07
    10cc:	78 85       	ldd	r23, Y+8	; 0x08
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <user_target+0xf6>
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2000);
	if ((operation == '+') || (operation == '-'))
    10f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f4:	8b 32       	cpi	r24, 0x2B	; 43
    10f6:	19 f0       	breq	.+6      	; 0x10fe <user_target+0x10a>
    10f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fa:	8d 32       	cpi	r24, 0x2D	; 45
    10fc:	91 f4       	brne	.+36     	; 0x1122 <user_target+0x12e>
	{
		if (operation == '+')
    10fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1100:	8b 32       	cpi	r24, 0x2B	; 43
    1102:	31 f4       	brne	.+12     	; 0x1110 <user_target+0x11c>
		{
			UART_sendByte (opendoor);
    1104:	84 e0       	ldi	r24, 0x04	; 4
    1106:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
			return opendoor;
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	88 8b       	std	Y+16, r24	; 0x10
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <user_target+0x132>
		}
		else if (operation == '-')
    1110:	8f 85       	ldd	r24, Y+15	; 0x0f
    1112:	8d 32       	cpi	r24, 0x2D	; 45
    1114:	31 f4       	brne	.+12     	; 0x1122 <user_target+0x12e>
		{
			UART_sendByte (changepassword);
    1116:	85 e0       	ldi	r24, 0x05	; 5
    1118:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
			return changepassword;
    111c:	85 e0       	ldi	r24, 0x05	; 5
    111e:	88 8b       	std	Y+16, r24	; 0x10
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <user_target+0x132>
		}
	}
		return -1;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	88 8b       	std	Y+16, r24	; 0x10
    1126:	88 89       	ldd	r24, Y+16	; 0x10
}
    1128:	60 96       	adiw	r28, 0x10	; 16
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <increment_flag>:
////////////////////////////////////////////////////

void increment_flag()
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
g_flag++;
    1142:	80 91 f2 00 	lds	r24, 0x00F2
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	80 93 f2 00 	sts	0x00F2, r24

}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <system_pause>:
void system_pause (void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	2f 97       	sbiw	r28, 0x0f	; 15
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61

	TIMER_data g_timer1A={timer1,compare,0,Prescaler_1024,0,65500,0} ;
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	9c 87       	std	Y+12, r25	; 0x0c
    116c:	8b 87       	std	Y+11, r24	; 0x0b
    116e:	e6 ee       	ldi	r30, 0xE6	; 230
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	fe 87       	std	Y+14, r31	; 0x0e
    1174:	ed 87       	std	Y+13, r30	; 0x0d
    1176:	fa e0       	ldi	r31, 0x0A	; 10
    1178:	ff 87       	std	Y+15, r31	; 0x0f
    117a:	ed 85       	ldd	r30, Y+13	; 0x0d
    117c:	fe 85       	ldd	r31, Y+14	; 0x0e
    117e:	00 80       	ld	r0, Z
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	9e 87       	std	Y+14, r25	; 0x0e
    1188:	8d 87       	std	Y+13, r24	; 0x0d
    118a:	eb 85       	ldd	r30, Y+11	; 0x0b
    118c:	fc 85       	ldd	r31, Y+12	; 0x0c
    118e:	00 82       	st	Z, r0
    1190:	8b 85       	ldd	r24, Y+11	; 0x0b
    1192:	9c 85       	ldd	r25, Y+12	; 0x0c
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	9c 87       	std	Y+12, r25	; 0x0c
    1198:	8b 87       	std	Y+11, r24	; 0x0b
    119a:	9f 85       	ldd	r25, Y+15	; 0x0f
    119c:	91 50       	subi	r25, 0x01	; 1
    119e:	9f 87       	std	Y+15, r25	; 0x0f
    11a0:	ef 85       	ldd	r30, Y+15	; 0x0f
    11a2:	ee 23       	and	r30, r30
    11a4:	51 f7       	brne	.-44     	; 0x117a <system_pause+0x28>
	timer_init(&g_timer1A);
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <timer_init>
	TIMER1_setCallBack(increment_flag);
    11ae:	8d e9       	ldi	r24, 0x9D	; 157
    11b0:	98 e0       	ldi	r25, 0x08	; 8
    11b2:	0e 94 03 14 	call	0x2806	; 0x2806 <TIMER1_setCallBack>
	 LCD_displayString("system is locked: ");
    11b6:	87 e9       	ldi	r24, 0x97	; 151
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
	while(g_flag<7)
    11be:	80 91 f2 00 	lds	r24, 0x00F2
    11c2:	87 30       	cpi	r24, 0x07	; 7
    11c4:	e0 f3       	brcs	.-8      	; 0x11be <system_pause+0x6c>
	{
		;
	}
	if(g_flag==7)
    11c6:	80 91 f2 00 	lds	r24, 0x00F2
    11ca:	87 30       	cpi	r24, 0x07	; 7
    11cc:	31 f4       	brne	.+12     	; 0x11da <system_pause+0x88>
	{

		TIMER1_stop();
    11ce:	0e 94 2d 14 	call	0x285a	; 0x285a <TIMER1_stop>
		g_flag=0;
    11d2:	10 92 f2 00 	sts	0x00F2, r1
	    LCD_clearScreen();
    11d6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
	}
}
    11da:	2f 96       	adiw	r28, 0x0f	; 15
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <sent_stateFlag>:

void sent_stateFlag (uint8 flag)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte (flag);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <main>:
int main(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	e2 97       	sbiw	r28, 0x32	; 50
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
	    uint8 operation;
		uint8 matching_result=false;
    121a:	1d 8e       	std	Y+29, r1	; 0x1d
		uint8 Str[20];
		UART_init(); // initialize UART driver
    121c:	0e 94 4c 14 	call	0x2898	; 0x2898 <UART_init>
		LCD_init(); // initialize LCD driver
    1220:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_init>
		UART_sendByte(M2_READY); // MC2 is ready
    1224:	80 e1       	ldi	r24, 0x10	; 16
    1226:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
		UART_receiveString(Str); // receive the string
    122a:	ce 01       	movw	r24, r28
    122c:	4f 96       	adiw	r24, 0x1f	; 31
    122e:	0e 94 b5 14 	call	0x296a	; 0x296a <UART_receiveString>
		LCD_displayString(Str); // display the string on LCD
    1232:	ce 01       	movw	r24, r28
    1234:	4f 96       	adiw	r24, 0x1f	; 31
    1236:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <main+0x3e>

    while(1)
    {
    		while((g_state==false))
    			{
    			    LCD_clearScreen();
    123c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
    				set_password();
    1240:	0e 94 a3 05 	call	0xb46	; 0xb46 <set_password>
		UART_receiveString(Str); // receive the string
		LCD_displayString(Str); // display the string on LCD

    while(1)
    {
    		while((g_state==false))
    1244:	80 91 f0 00 	lds	r24, 0x00F0
    1248:	88 23       	and	r24, r24
    124a:	c1 f3       	breq	.-16     	; 0x123c <main+0x36>
    				set_password();

    			}

////////////////////////////////////////////////////////////////
    		LCD_clearScreen();
    124c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_clearScreen>
    		LCD_displayString("open_door:+ ");
    1250:	8a ea       	ldi	r24, 0xAA	; 170
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
    		LCD_goToRowColumn(1,0);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>
    		LCD_displayString("change_pass:- ");
    1260:	87 eb       	ldi	r24, 0xB7	; 183
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
//////////////////////////////////////////////////////
    		operation=user_target();
    1268:	0e 94 fa 07 	call	0xff4	; 0xff4 <user_target>
    126c:	8e 8f       	std	Y+30, r24	; 0x1e
    		if(operation==opendoor)
    126e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	09 f0       	breq	.+2      	; 0x1276 <main+0x70>
    1274:	21 c1       	rjmp	.+578    	; 0x14b8 <main+0x2b2>
    1276:	11 c0       	rjmp	.+34     	; 0x129a <main+0x94>
    		{
    			while((matching_result==false)&&(g_maxEntry!=3))
			    {
    				matching_result=log_in();
    1278:	0e 94 33 07 	call	0xe66	; 0xe66 <log_in>
    127c:	8d 8f       	std	Y+29, r24	; 0x1d

    				if (matching_result==false)
    127e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1280:	88 23       	and	r24, r24
    1282:	59 f4       	brne	.+22     	; 0x129a <main+0x94>
    				{
    					g_maxEntry++;
    1284:	80 91 f1 00 	lds	r24, 0x00F1
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	80 93 f1 00 	sts	0x00F1, r24
    					LCD_intgerToString(g_maxEntry);
    128e:	80 91 f1 00 	lds	r24, 0x00F1
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>
    		LCD_displayString("change_pass:- ");
//////////////////////////////////////////////////////
    		operation=user_target();
    		if(operation==opendoor)
    		{
    			while((matching_result==false)&&(g_maxEntry!=3))
    129a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    129c:	88 23       	and	r24, r24
    129e:	21 f4       	brne	.+8      	; 0x12a8 <main+0xa2>
    12a0:	80 91 f1 00 	lds	r24, 0x00F1
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	41 f7       	brne	.-48     	; 0x1278 <main+0x72>
    				{
    					g_maxEntry++;
    					LCD_intgerToString(g_maxEntry);
    				}
		     	}
    			if (g_maxEntry!=3)
    12a8:	80 91 f1 00 	lds	r24, 0x00F1
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <main+0xac>
    12b0:	f4 c0       	rjmp	.+488    	; 0x149a <main+0x294>
    			{

    				g_maxEntry=0;
    12b2:	10 92 f1 00 	sts	0x00F1, r1
    				//open door

    				LCD_displayString("door opens ");
    12b6:	86 ec       	ldi	r24, 0xC6	; 198
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	96 e9       	ldi	r25, 0x96	; 150
    12c2:	a8 e1       	ldi	r26, 0x18	; 24
    12c4:	bb e4       	ldi	r27, 0x4B	; 75
    12c6:	89 8f       	std	Y+25, r24	; 0x19
    12c8:	9a 8f       	std	Y+26, r25	; 0x1a
    12ca:	ab 8f       	std	Y+27, r26	; 0x1b
    12cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ce:	69 8d       	ldd	r22, Y+25	; 0x19
    12d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	53 e4       	ldi	r21, 0x43	; 67
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8d 8b       	std	Y+21, r24	; 0x15
    12e8:	9e 8b       	std	Y+22, r25	; 0x16
    12ea:	af 8b       	std	Y+23, r26	; 0x17
    12ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ee:	6d 89       	ldd	r22, Y+21	; 0x15
    12f0:	7e 89       	ldd	r23, Y+22	; 0x16
    12f2:	8f 89       	ldd	r24, Y+23	; 0x17
    12f4:	98 8d       	ldd	r25, Y+24	; 0x18
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	5f e3       	ldi	r21, 0x3F	; 63
    12fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1302:	88 23       	and	r24, r24
    1304:	2c f4       	brge	.+10     	; 0x1310 <main+0x10a>
		__ticks = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9c 8b       	std	Y+20, r25	; 0x14
    130c:	8b 8b       	std	Y+19, r24	; 0x13
    130e:	3f c0       	rjmp	.+126    	; 0x138e <main+0x188>
	else if (__tmp > 65535)
    1310:	6d 89       	ldd	r22, Y+21	; 0x15
    1312:	7e 89       	ldd	r23, Y+22	; 0x16
    1314:	8f 89       	ldd	r24, Y+23	; 0x17
    1316:	98 8d       	ldd	r25, Y+24	; 0x18
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	3f ef       	ldi	r19, 0xFF	; 255
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	57 e4       	ldi	r21, 0x47	; 71
    1320:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1324:	18 16       	cp	r1, r24
    1326:	4c f5       	brge	.+82     	; 0x137a <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1328:	69 8d       	ldd	r22, Y+25	; 0x19
    132a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    132c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e2       	ldi	r20, 0x20	; 32
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9c 8b       	std	Y+20, r25	; 0x14
    134e:	8b 8b       	std	Y+19, r24	; 0x13
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <main+0x16a>
    1352:	89 e1       	ldi	r24, 0x19	; 25
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a 8b       	std	Y+18, r25	; 0x12
    1358:	89 8b       	std	Y+17, r24	; 0x11
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	9a 89       	ldd	r25, Y+18	; 0x12
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <main+0x158>
    1362:	9a 8b       	std	Y+18, r25	; 0x12
    1364:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	8b 89       	ldd	r24, Y+19	; 0x13
    1368:	9c 89       	ldd	r25, Y+20	; 0x14
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1370:	8b 89       	ldd	r24, Y+19	; 0x13
    1372:	9c 89       	ldd	r25, Y+20	; 0x14
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f7       	brne	.-38     	; 0x1352 <main+0x14c>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137a:	6d 89       	ldd	r22, Y+21	; 0x15
    137c:	7e 89       	ldd	r23, Y+22	; 0x16
    137e:	8f 89       	ldd	r24, Y+23	; 0x17
    1380:	98 8d       	ldd	r25, Y+24	; 0x18
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	9c 8b       	std	Y+20, r25	; 0x14
    138c:	8b 8b       	std	Y+19, r24	; 0x13
    138e:	8b 89       	ldd	r24, Y+19	; 0x13
    1390:	9c 89       	ldd	r25, Y+20	; 0x14
    1392:	98 8b       	std	Y+16, r25	; 0x10
    1394:	8f 87       	std	Y+15, r24	; 0x0f
    1396:	8f 85       	ldd	r24, Y+15	; 0x0f
    1398:	98 89       	ldd	r25, Y+16	; 0x10
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <main+0x194>
    139e:	98 8b       	std	Y+16, r25	; 0x10
    13a0:	8f 87       	std	Y+15, r24	; 0x0f
    				_delay_ms(10000000);
    				LCD_goToRowColumn(1,0);
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>
    				LCD_displayString("door CLOSE ");
    13aa:	82 ed       	ldi	r24, 0xD2	; 210
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
    13b2:	80 e8       	ldi	r24, 0x80	; 128
    13b4:	96 e9       	ldi	r25, 0x96	; 150
    13b6:	a8 e1       	ldi	r26, 0x18	; 24
    13b8:	bb e4       	ldi	r27, 0x4B	; 75
    13ba:	8b 87       	std	Y+11, r24	; 0x0b
    13bc:	9c 87       	std	Y+12, r25	; 0x0c
    13be:	ad 87       	std	Y+13, r26	; 0x0d
    13c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8f 83       	std	Y+7, r24	; 0x07
    13dc:	98 87       	std	Y+8, r25	; 0x08
    13de:	a9 87       	std	Y+9, r26	; 0x09
    13e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <main+0x1fe>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <main+0x27c>
	else if (__tmp > 65535)
    1404:	6f 81       	ldd	r22, Y+7	; 0x07
    1406:	78 85       	ldd	r23, Y+8	; 0x08
    1408:	89 85       	ldd	r24, Y+9	; 0x09
    140a:	9a 85       	ldd	r25, Y+10	; 0x0a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <main+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	6b 85       	ldd	r22, Y+11	; 0x0b
    141e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1420:	8d 85       	ldd	r24, Y+13	; 0x0d
    1422:	9e 85       	ldd	r25, Y+14	; 0x0e
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <main+0x25e>
    1446:	89 e1       	ldi	r24, 0x19	; 25
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <main+0x24c>
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <main+0x240>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <main+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9e 83       	std	Y+6, r25	; 0x06
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <main+0x288>
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
    				 _delay_ms(10000000);
    				matching_result=false;
    1496:	1d 8e       	std	Y+29, r1	; 0x1d
    1498:	d5 ce       	rjmp	.-598    	; 0x1244 <main+0x3e>
    			}
    			else if (g_maxEntry==3)
    149a:	80 91 f1 00 	lds	r24, 0x00F1
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0x29e>
    14a2:	d0 ce       	rjmp	.-608    	; 0x1244 <main+0x3e>
    			{
    				LCD_intgerToString(5);
    14a4:	85 e0       	ldi	r24, 0x05	; 5
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>
    				system_pause();
    14ac:	0e 94 a9 08 	call	0x1152	; 0x1152 <system_pause>

    				g_maxEntry=0;
    14b0:	10 92 f1 00 	sts	0x00F1, r1
    				matching_result=false;
    14b4:	1d 8e       	std	Y+29, r1	; 0x1d
    14b6:	c6 ce       	rjmp	.-628    	; 0x1244 <main+0x3e>

    			}
    		}
    		else if(operation==changepassword)
    14b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ba:	85 30       	cpi	r24, 0x05	; 5
    14bc:	91 f5       	brne	.+100    	; 0x1522 <main+0x31c>
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <main+0x2dc>
    		{
    			while((matching_result==false)&&(g_maxEntry!=3))
    				{
						matching_result=log_in();
    14c0:	0e 94 33 07 	call	0xe66	; 0xe66 <log_in>
    14c4:	8d 8f       	std	Y+29, r24	; 0x1d

						if (matching_result==false)
    14c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c8:	88 23       	and	r24, r24
    14ca:	59 f4       	brne	.+22     	; 0x14e2 <main+0x2dc>
						{
							g_maxEntry++;
    14cc:	80 91 f1 00 	lds	r24, 0x00F1
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	80 93 f1 00 	sts	0x00F1, r24
							LCD_intgerToString(g_maxEntry);
    14d6:	80 91 f1 00 	lds	r24, 0x00F1
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>

    			}
    		}
    		else if(operation==changepassword)
    		{
    			while((matching_result==false)&&(g_maxEntry!=3))
    14e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e4:	88 23       	and	r24, r24
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <main+0x2ea>
    14e8:	80 91 f1 00 	lds	r24, 0x00F1
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	41 f7       	brne	.-48     	; 0x14c0 <main+0x2ba>
							g_maxEntry++;
							LCD_intgerToString(g_maxEntry);
						}

    				}
    			if (g_maxEntry!=3)
    14f0:	80 91 f1 00 	lds	r24, 0x00F1
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	31 f0       	breq	.+12     	; 0x1504 <main+0x2fe>
    			    {
    			 //   LCD_clearScreen();
    			    set_password();
    14f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <set_password>
    			    g_maxEntry=0;
    14fc:	10 92 f1 00 	sts	0x00F1, r1
    			    matching_result=false;
    1500:	1d 8e       	std	Y+29, r1	; 0x1d
    1502:	a0 ce       	rjmp	.-704    	; 0x1244 <main+0x3e>
    			    }
    			else if (g_maxEntry==3){
    1504:	80 91 f1 00 	lds	r24, 0x00F1
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	09 f0       	breq	.+2      	; 0x150e <main+0x308>
    150c:	9b ce       	rjmp	.-714    	; 0x1244 <main+0x3e>
    				LCD_intgerToString(5);
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_intgerToString>
    				system_pause();
    1516:	0e 94 a9 08 	call	0x1152	; 0x1152 <system_pause>

    				g_maxEntry=0;
    151a:	10 92 f1 00 	sts	0x00F1, r1
    			    matching_result=false;
    151e:	1d 8e       	std	Y+29, r1	; 0x1d
    1520:	91 ce       	rjmp	.-734    	; 0x1244 <main+0x3e>

    				}
    			}
    		else
    		{
    			g_maxEntry=0;
    1522:	10 92 f1 00 	sts	0x00F1, r1
    			matching_result=false;
    1526:	1d 8e       	std	Y+29, r1	; 0x1d
    1528:	8d ce       	rjmp	.-742    	; 0x1244 <main+0x3e>

0000152a <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1532:	e7 e2       	ldi	r30, 0x27	; 39
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    1538:	e6 e2       	ldi	r30, 0x26	; 38
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	83 e8       	ldi	r24, 0x83	; 131
    153e:	80 83       	st	Z, r24
}
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	87 70       	andi	r24, 0x07	; 7
    1556:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1558:	a7 e2       	ldi	r26, 0x27	; 39
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e7 e2       	ldi	r30, 0x27	; 39
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 7e       	andi	r24, 0xE0	; 224
    1564:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    1566:	a7 e2       	ldi	r26, 0x27	; 39
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e7 e2       	ldi	r30, 0x27	; 39
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	90 81       	ld	r25, Z
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	89 2b       	or	r24, r25
    1574:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    1576:	a6 e2       	ldi	r26, 0x26	; 38
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e6 e2       	ldi	r30, 0x26	; 38
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    1584:	e6 e2       	ldi	r30, 0x26	; 38
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	80 71       	andi	r24, 0x10	; 16
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	b9 f3       	breq	.-18     	; 0x1584 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    1596:	a6 e2       	ldi	r26, 0x26	; 38
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e6 e2       	ldi	r30, 0x26	; 38
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 61       	ori	r24, 0x10	; 16
    15a2:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    15a4:	e4 e2       	ldi	r30, 0x24	; 36
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <__vector_2>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* External INT1 Interrupt Service Routine */
ISR(INT1_vect)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL)
    15de:	80 91 f3 00 	lds	r24, 0x00F3
    15e2:	90 91 f4 00 	lds	r25, 0x00F4
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <__vector_2+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    15ea:	e0 91 f3 00 	lds	r30, 0x00F3
    15ee:	f0 91 f4 00 	lds	r31, 0x00F4
    15f2:	09 95       	icall
		}
}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <Interrupt_Init>:
 * Description : Function to initialize the ICU driver
 * 	1. Set the required external  interrupt.
 * 	2. Set the required edge detection.
 */
void Interrupt_Init(INT_NUM interrupt_n,clock_type clk_type)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <Interrupt_Init+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	6a 83       	std	Y+2, r22	; 0x02
	/* TO initialize  interrupt 0 */
	if(interrupt_n==0)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	88 23       	and	r24, r24
    162c:	99 f5       	brne	.+102    	; 0x1694 <Interrupt_Init+0x7a>
		{
		/* Configure INT0/PD2 as input pin*/
		CLEAR_BIT(DDRD,PD2);
    162e:	a1 e3       	ldi	r26, 0x31	; 49
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e1 e3       	ldi	r30, 0x31	; 49
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8b 7f       	andi	r24, 0xFB	; 251
    163a:	8c 93       	st	X, r24
		/* Enable external interrupt pin INT0*/
		SET_BIT(GICR,INT0);
    163c:	ab e5       	ldi	r26, 0x5B	; 91
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e5       	ldi	r30, 0x5B	; 91
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 64       	ori	r24, 0x40	; 64
    1648:	8c 93       	st	X, r24
		if(clk_type==falling_edge)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 23       	and	r24, r24
    164e:	79 f4       	brne	.+30     	; 0x166e <Interrupt_Init+0x54>
				{
				/* Trigger INT0 with the falling edge*/
				SET_BIT(MCUCR,ISC01);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	82 60       	ori	r24, 0x02	; 2
    165c:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC00);
    165e:	a5 e5       	ldi	r26, 0x55	; 85
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e5       	ldi	r30, 0x55	; 85
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	8c 93       	st	X, r24
    166c:	6e c0       	rjmp	.+220    	; 0x174a <Interrupt_Init+0x130>
				}

				else if (clk_type==rising_edge)
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	09 f0       	breq	.+2      	; 0x1676 <Interrupt_Init+0x5c>
    1674:	6a c0       	rjmp	.+212    	; 0x174a <Interrupt_Init+0x130>
				{
					/* Trigger INT0 with the rising edge*/
					SET_BIT(MCUCR,ISC01);
    1676:	a5 e5       	ldi	r26, 0x55	; 85
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e5       	ldi	r30, 0x55	; 85
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC00);
    1684:	a5 e5       	ldi	r26, 0x55	; 85
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e5       	ldi	r30, 0x55	; 85
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	8c 93       	st	X, r24
    1692:	5b c0       	rjmp	.+182    	; 0x174a <Interrupt_Init+0x130>
				}
		}
/****************************************************************/
	/* TO initialize  interrupt 1 */
	else if(interrupt_n==1)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 f5       	brne	.+100    	; 0x16fe <Interrupt_Init+0xe4>
	{
		 /* Configure INT1/PD3 as input pin*/
		CLEAR_BIT(DDRD,PD3);
    169a:	a1 e3       	ldi	r26, 0x31	; 49
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e1 e3       	ldi	r30, 0x31	; 49
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	8c 93       	st	X, r24
		 /* Enable external interrupt pin INT1*/
		SET_BIT(GICR,INT1);
    16a8:	ab e5       	ldi	r26, 0x5B	; 91
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e5       	ldi	r30, 0x5B	; 91
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	8c 93       	st	X, r24
		if(clk_type==falling_edge)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	88 23       	and	r24, r24
    16ba:	79 f4       	brne	.+30     	; 0x16da <Interrupt_Init+0xc0>
		{
		/*Trigger INT1 with the falling edge*/
		SET_BIT(MCUCR,ISC11);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	88 60       	ori	r24, 0x08	; 8
    16c8:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC10);
    16ca:	a5 e5       	ldi	r26, 0x55	; 85
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e5       	ldi	r30, 0x55	; 85
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8b 7f       	andi	r24, 0xFB	; 251
    16d6:	8c 93       	st	X, r24
    16d8:	38 c0       	rjmp	.+112    	; 0x174a <Interrupt_Init+0x130>
		}
		else if (clk_type==rising_edge)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	a9 f5       	brne	.+106    	; 0x174a <Interrupt_Init+0x130>
		{
			/*Trigger INT1 with the rising edge*/
			SET_BIT(MCUCR,ISC11);
    16e0:	a5 e5       	ldi	r26, 0x55	; 85
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e5       	ldi	r30, 0x55	; 85
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	88 60       	ori	r24, 0x08	; 8
    16ec:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC10);
    16ee:	a5 e5       	ldi	r26, 0x55	; 85
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e5       	ldi	r30, 0x55	; 85
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	84 60       	ori	r24, 0x04	; 4
    16fa:	8c 93       	st	X, r24
    16fc:	26 c0       	rjmp	.+76     	; 0x174a <Interrupt_Init+0x130>
		}
	}
/****************************************************************/
	/* TO initialize  interrupt 2 */
	else if(interrupt_n==2)
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	19 f5       	brne	.+70     	; 0x174a <Interrupt_Init+0x130>
		{
			/* Configure INT2/PB2 as input pin*/
			CLEAR_BIT(DDRB,PB2);
    1704:	a7 e3       	ldi	r26, 0x37	; 55
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	8c 93       	st	X, r24
			/* Enable external interrupt pin INT2*/
			SET_BIT(GICR,INT2);
    1712:	ab e5       	ldi	r26, 0x5B	; 91
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	eb e5       	ldi	r30, 0x5B	; 91
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 62       	ori	r24, 0x20	; 32
    171e:	8c 93       	st	X, r24

			if(clk_type==falling_edge)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 23       	and	r24, r24
    1724:	41 f4       	brne	.+16     	; 0x1736 <Interrupt_Init+0x11c>
				{
					/* Trigger INT2 with the falling edge*/
					CLEAR_BIT(MCUCR,ISC2);
    1726:	a5 e5       	ldi	r26, 0x55	; 85
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e5       	ldi	r30, 0x55	; 85
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8f 7b       	andi	r24, 0xBF	; 191
    1732:	8c 93       	st	X, r24
    1734:	0a c0       	rjmp	.+20     	; 0x174a <Interrupt_Init+0x130>
				}

			else if (clk_type==rising_edge)
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	39 f4       	brne	.+14     	; 0x174a <Interrupt_Init+0x130>
				{
					/* Trigger INT2 with the RISING edge*/
					SET_BIT(MCUCR,ISC2);
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	80 64       	ori	r24, 0x40	; 64
    1748:	8c 93       	st	X, r24
				}
		}
/****************************************************************/
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <Interrupt_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Interrupt_setCallBack(void(*a_ptr)(void))
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <Interrupt_setCallBack+0x6>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	90 93 f4 00 	sts	0x00F4, r25
    176a:	80 93 f3 00 	sts	0x00F3, r24
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <KeyPad_getPressedKey+0x6>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1782:	1a 82       	std	Y+2, r1	; 0x02
    1784:	4c c0       	rjmp	.+152    	; 0x181e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1786:	ea e3       	ldi	r30, 0x3A	; 58
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	80 e1       	ldi	r24, 0x10	; 16
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <KeyPad_getPressedKey+0x22>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	2a 95       	dec	r18
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <KeyPad_getPressedKey+0x1e>
    179e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    17a0:	eb e3       	ldi	r30, 0x3B	; 59
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	80 e1       	ldi	r24, 0x10	; 16
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <KeyPad_getPressedKey+0x3e>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <KeyPad_getPressedKey+0x3a>
    17ba:	80 95       	com	r24
    17bc:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    17be:	19 82       	std	Y+1, r1	; 0x01
    17c0:	28 c0       	rjmp	.+80     	; 0x1812 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <KeyPad_getPressedKey+0x62>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <KeyPad_getPressedKey+0x5e>
    17de:	ca 01       	movw	r24, r20
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	91 f4       	brne	.+36     	; 0x180c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	89 0f       	add	r24, r25
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	0e 94 14 0c 	call	0x1828	; 0x1828 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	84 30       	cpi	r24, 0x04	; 4
    1816:	a8 f2       	brcs	.-86     	; 0x17c2 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	08 f4       	brcc	.+2      	; 0x1826 <KeyPad_getPressedKey+0xae>
    1824:	b0 cf       	rjmp	.-160    	; 0x1786 <KeyPad_getPressedKey+0xe>
    1826:	ad cf       	rjmp	.-166    	; 0x1782 <KeyPad_getPressedKey+0xa>

00001828 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <KeyPad_4x4_adjustKeyNumber+0x6>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <KeyPad_4x4_adjustKeyNumber+0x8>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3c 83       	std	Y+4, r19	; 0x04
    183e:	2b 83       	std	Y+3, r18	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <KeyPad_4x4_adjustKeyNumber+0x24>
    184a:	70 c0       	rjmp	.+224    	; 0x192c <KeyPad_4x4_adjustKeyNumber+0x104>
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	29 30       	cpi	r18, 0x09	; 9
    1852:	31 05       	cpc	r19, r1
    1854:	5c f5       	brge	.+86     	; 0x18ac <KeyPad_4x4_adjustKeyNumber+0x84>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1860:	59 c0       	rjmp	.+178    	; 0x1914 <KeyPad_4x4_adjustKeyNumber+0xec>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	25 30       	cpi	r18, 0x05	; 5
    1868:	31 05       	cpc	r19, r1
    186a:	9c f4       	brge	.+38     	; 0x1892 <KeyPad_4x4_adjustKeyNumber+0x6a>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <KeyPad_4x4_adjustKeyNumber+0x50>
    1876:	48 c0       	rjmp	.+144    	; 0x1908 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1878:	2b 81       	ldd	r18, Y+3	; 0x03
    187a:	3c 81       	ldd	r19, Y+4	; 0x04
    187c:	23 30       	cpi	r18, 0x03	; 3
    187e:	31 05       	cpc	r19, r1
    1880:	0c f0       	brlt	.+2      	; 0x1884 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1882:	45 c0       	rjmp	.+138    	; 0x190e <KeyPad_4x4_adjustKeyNumber+0xe6>
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <KeyPad_4x4_adjustKeyNumber+0x68>
    188e:	39 c0       	rjmp	.+114    	; 0x1902 <KeyPad_4x4_adjustKeyNumber+0xda>
    1890:	67 c0       	rjmp	.+206    	; 0x1960 <KeyPad_4x4_adjustKeyNumber+0x138>
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	26 30       	cpi	r18, 0x06	; 6
    1898:	31 05       	cpc	r19, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <KeyPad_4x4_adjustKeyNumber+0x76>
    189c:	41 c0       	rjmp	.+130    	; 0x1920 <KeyPad_4x4_adjustKeyNumber+0xf8>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	87 30       	cpi	r24, 0x07	; 7
    18a4:	91 05       	cpc	r25, r1
    18a6:	0c f0       	brlt	.+2      	; 0x18aa <KeyPad_4x4_adjustKeyNumber+0x82>
    18a8:	3e c0       	rjmp	.+124    	; 0x1926 <KeyPad_4x4_adjustKeyNumber+0xfe>
    18aa:	37 c0       	rjmp	.+110    	; 0x191a <KeyPad_4x4_adjustKeyNumber+0xf2>
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	2c 30       	cpi	r18, 0x0C	; 12
    18b2:	31 05       	cpc	r19, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <KeyPad_4x4_adjustKeyNumber+0x90>
    18b6:	46 c0       	rjmp	.+140    	; 0x1944 <KeyPad_4x4_adjustKeyNumber+0x11c>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	8d 30       	cpi	r24, 0x0D	; 13
    18be:	91 05       	cpc	r25, r1
    18c0:	5c f4       	brge	.+22     	; 0x18d8 <KeyPad_4x4_adjustKeyNumber+0xb0>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	2a 30       	cpi	r18, 0x0A	; 10
    18c8:	31 05       	cpc	r19, r1
    18ca:	b1 f1       	breq	.+108    	; 0x1938 <KeyPad_4x4_adjustKeyNumber+0x110>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	8b 30       	cpi	r24, 0x0B	; 11
    18d2:	91 05       	cpc	r25, r1
    18d4:	a4 f5       	brge	.+104    	; 0x193e <KeyPad_4x4_adjustKeyNumber+0x116>
    18d6:	2d c0       	rjmp	.+90     	; 0x1932 <KeyPad_4x4_adjustKeyNumber+0x10a>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	2e 30       	cpi	r18, 0x0E	; 14
    18de:	31 05       	cpc	r19, r1
    18e0:	b9 f1       	breq	.+110    	; 0x1950 <KeyPad_4x4_adjustKeyNumber+0x128>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	8e 30       	cpi	r24, 0x0E	; 14
    18e8:	91 05       	cpc	r25, r1
    18ea:	7c f1       	brlt	.+94     	; 0x194a <KeyPad_4x4_adjustKeyNumber+0x122>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	2f 30       	cpi	r18, 0x0F	; 15
    18f2:	31 05       	cpc	r19, r1
    18f4:	79 f1       	breq	.+94     	; 0x1954 <KeyPad_4x4_adjustKeyNumber+0x12c>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	80 31       	cpi	r24, 0x10	; 16
    18fc:	91 05       	cpc	r25, r1
    18fe:	69 f1       	breq	.+90     	; 0x195a <KeyPad_4x4_adjustKeyNumber+0x132>
    1900:	2f c0       	rjmp	.+94     	; 0x1960 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1902:	97 e0       	ldi	r25, 0x07	; 7
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	2e c0       	rjmp	.+92     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1908:	28 e0       	ldi	r18, 0x08	; 8
    190a:	2a 83       	std	Y+2, r18	; 0x02
    190c:	2b c0       	rjmp	.+86     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    190e:	39 e0       	ldi	r19, 0x09	; 9
    1910:	3a 83       	std	Y+2, r19	; 0x02
    1912:	28 c0       	rjmp	.+80     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1914:	85 e2       	ldi	r24, 0x25	; 37
    1916:	8a 83       	std	Y+2, r24	; 0x02
    1918:	25 c0       	rjmp	.+74     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    191a:	94 e0       	ldi	r25, 0x04	; 4
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1920:	25 e0       	ldi	r18, 0x05	; 5
    1922:	2a 83       	std	Y+2, r18	; 0x02
    1924:	1f c0       	rjmp	.+62     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1926:	36 e0       	ldi	r19, 0x06	; 6
    1928:	3a 83       	std	Y+2, r19	; 0x02
    192a:	1c c0       	rjmp	.+56     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    192c:	8a e2       	ldi	r24, 0x2A	; 42
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	19 c0       	rjmp	.+50     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1938:	22 e0       	ldi	r18, 0x02	; 2
    193a:	2a 83       	std	Y+2, r18	; 0x02
    193c:	13 c0       	rjmp	.+38     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    193e:	33 e0       	ldi	r19, 0x03	; 3
    1940:	3a 83       	std	Y+2, r19	; 0x02
    1942:	10 c0       	rjmp	.+32     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1944:	8d e2       	ldi	r24, 0x2D	; 45
    1946:	8a 83       	std	Y+2, r24	; 0x02
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    194a:	9d e0       	ldi	r25, 0x0D	; 13
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	0a c0       	rjmp	.+20     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1950:	1a 82       	std	Y+2, r1	; 0x02
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1954:	2d e3       	ldi	r18, 0x3D	; 61
    1956:	2a 83       	std	Y+2, r18	; 0x02
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    195a:	3b e2       	ldi	r19, 0x2B	; 43
    195c:	3a 83       	std	Y+2, r19	; 0x02
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8a 83       	std	Y+2, r24	; 0x02
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    197c:	e4 e3       	ldi	r30, 0x34	; 52
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1984:	a1 e3       	ldi	r26, 0x31	; 49
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e1 e3       	ldi	r30, 0x31	; 49
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	80 67       	ori	r24, 0x70	; 112
    1990:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1992:	88 e3       	ldi	r24, 0x38	; 56
    1994:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1998:	8c e0       	ldi	r24, 0x0C	; 12
    199a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_sendCommand>
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	e9 97       	sbiw	r28, 0x39	; 57
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7e       	andi	r24, 0xEF	; 239
    19cc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19ce:	a2 e3       	ldi	r26, 0x32	; 50
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e2 e3       	ldi	r30, 0x32	; 50
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 7d       	andi	r24, 0xDF	; 223
    19da:	8c 93       	st	X, r24
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	8d ab       	std	Y+53, r24	; 0x35
    19e6:	9e ab       	std	Y+54, r25	; 0x36
    19e8:	af ab       	std	Y+55, r26	; 0x37
    19ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6d a9       	ldd	r22, Y+53	; 0x35
    19ee:	7e a9       	ldd	r23, Y+54	; 0x36
    19f0:	8f a9       	ldd	r24, Y+55	; 0x37
    19f2:	98 ad       	ldd	r25, Y+56	; 0x38
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	53 e4       	ldi	r21, 0x43	; 67
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	89 ab       	std	Y+49, r24	; 0x31
    1a06:	9a ab       	std	Y+50, r25	; 0x32
    1a08:	ab ab       	std	Y+51, r26	; 0x33
    1a0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a10:	8b a9       	ldd	r24, Y+51	; 0x33
    1a12:	9c a9       	ldd	r25, Y+52	; 0x34
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_sendCommand+0x84>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	98 ab       	std	Y+48, r25	; 0x30
    1a2a:	8f a7       	std	Y+47, r24	; 0x2f
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a30:	7a a9       	ldd	r23, Y+50	; 0x32
    1a32:	8b a9       	ldd	r24, Y+51	; 0x33
    1a34:	9c a9       	ldd	r25, Y+52	; 0x34
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6d a9       	ldd	r22, Y+53	; 0x35
    1a48:	7e a9       	ldd	r23, Y+54	; 0x36
    1a4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	98 ab       	std	Y+48, r25	; 0x30
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_sendCommand+0xe4>
    1a70:	89 e1       	ldi	r24, 0x19	; 25
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e a7       	std	Y+46, r25	; 0x2e
    1a76:	8d a7       	std	Y+45, r24	; 0x2d
    1a78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0xd2>
    1a80:	9e a7       	std	Y+46, r25	; 0x2e
    1a82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a86:	98 a9       	ldd	r25, Y+48	; 0x30
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a90:	98 a9       	ldd	r25, Y+48	; 0x30
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_sendCommand+0xc6>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	98 ab       	std	Y+48, r25	; 0x30
    1aaa:	8f a7       	std	Y+47, r24	; 0x2f
    1aac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aae:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab0:	9c a7       	std	Y+44, r25	; 0x2c
    1ab2:	8b a7       	std	Y+43, r24	; 0x2b
    1ab4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_sendCommand+0x10e>
    1abc:	9c a7       	std	Y+44, r25	; 0x2c
    1abe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ac0:	a2 e3       	ldi	r26, 0x32	; 50
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 64       	ori	r24, 0x40	; 64
    1acc:	8c 93       	st	X, r24
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	8f a3       	std	Y+39, r24	; 0x27
    1ad8:	98 a7       	std	Y+40, r25	; 0x28
    1ada:	a9 a7       	std	Y+41, r26	; 0x29
    1adc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8b a3       	std	Y+35, r24	; 0x23
    1af8:	9c a3       	std	Y+36, r25	; 0x24
    1afa:	ad a3       	std	Y+37, r26	; 0x25
    1afc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1afe:	6b a1       	ldd	r22, Y+35	; 0x23
    1b00:	7c a1       	ldd	r23, Y+36	; 0x24
    1b02:	8d a1       	ldd	r24, Y+37	; 0x25
    1b04:	9e a1       	ldd	r25, Y+38	; 0x26
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_sendCommand+0x176>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1b20:	6b a1       	ldd	r22, Y+35	; 0x23
    1b22:	7c a1       	ldd	r23, Y+36	; 0x24
    1b24:	8d a1       	ldd	r24, Y+37	; 0x25
    1b26:	9e a1       	ldd	r25, Y+38	; 0x26
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9a a3       	std	Y+34, r25	; 0x22
    1b5e:	89 a3       	std	Y+33, r24	; 0x21
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <LCD_sendCommand+0x1d6>
    1b62:	89 e1       	ldi	r24, 0x19	; 25
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_sendCommand+0x1c4>
    1b72:	98 a3       	std	Y+32, r25	; 0x20
    1b74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	89 a1       	ldd	r24, Y+33	; 0x21
    1b78:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	89 a1       	ldd	r24, Y+33	; 0x21
    1b82:	9a a1       	ldd	r25, Y+34	; 0x22
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <LCD_sendCommand+0x1b8>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b90:	9e a1       	ldd	r25, Y+38	; 0x26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0x200>
    1bae:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1bb2:	e5 e3       	ldi	r30, 0x35	; 53
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb8:	80 83       	st	Z, r24
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e8       	ldi	r26, 0x80	; 128
    1bc0:	bf e3       	ldi	r27, 0x3F	; 63
    1bc2:	89 8f       	std	Y+25, r24	; 0x19
    1bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8d 8b       	std	Y+21, r24	; 0x15
    1be4:	9e 8b       	std	Y+22, r25	; 0x16
    1be6:	af 8b       	std	Y+23, r26	; 0x17
    1be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bea:	6d 89       	ldd	r22, Y+21	; 0x15
    1bec:	7e 89       	ldd	r23, Y+22	; 0x16
    1bee:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_sendCommand+0x262>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 8b       	std	Y+20, r25	; 0x14
    1c08:	8b 8b       	std	Y+19, r24	; 0x13
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	69 8d       	ldd	r22, Y+25	; 0x19
    1c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_sendCommand+0x2c2>
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
    1c56:	89 89       	ldd	r24, Y+17	; 0x11
    1c58:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_sendCommand+0x2b0>
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_sendCommand+0x2a4>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	98 89       	ldd	r25, Y+16	; 0x10
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendCommand+0x2ec>
    1c9a:	98 8b       	std	Y+16, r25	; 0x10
    1c9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7b       	andi	r24, 0xBF	; 191
    1caa:	8c 93       	st	X, r24
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e8       	ldi	r26, 0x80	; 128
    1cb2:	bf e3       	ldi	r27, 0x3F	; 63
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	53 e4       	ldi	r21, 0x43	; 67
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_sendCommand+0x354>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_sendCommand+0x3b4>
    1d40:	89 e1       	ldi	r24, 0x19	; 25
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_sendCommand+0x3a2>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_sendCommand+0x396>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_sendCommand+0x3de>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d90:	e9 96       	adiw	r28, 0x39	; 57
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	e9 97       	sbiw	r28, 0x39	; 57
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 61       	ori	r24, 0x10	; 16
    1dc4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1dc6:	a2 e3       	ldi	r26, 0x32	; 50
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 7d       	andi	r24, 0xDF	; 223
    1dd2:	8c 93       	st	X, r24
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	bf e3       	ldi	r27, 0x3F	; 63
    1ddc:	8d ab       	std	Y+53, r24	; 0x35
    1dde:	9e ab       	std	Y+54, r25	; 0x36
    1de0:	af ab       	std	Y+55, r26	; 0x37
    1de2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a e7       	ldi	r20, 0x7A	; 122
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	89 ab       	std	Y+49, r24	; 0x31
    1dfe:	9a ab       	std	Y+50, r25	; 0x32
    1e00:	ab ab       	std	Y+51, r26	; 0x33
    1e02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e04:	69 a9       	ldd	r22, Y+49	; 0x31
    1e06:	7a a9       	ldd	r23, Y+50	; 0x32
    1e08:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	98 ab       	std	Y+48, r25	; 0x30
    1e22:	8f a7       	std	Y+47, r24	; 0x2f
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1e26:	69 a9       	ldd	r22, Y+49	; 0x31
    1e28:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e40:	7e a9       	ldd	r23, Y+54	; 0x36
    1e42:	8f a9       	ldd	r24, Y+55	; 0x37
    1e44:	98 ad       	ldd	r25, Y+56	; 0x38
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <LCD_displayCharacter+0xe4>
    1e68:	89 e1       	ldi	r24, 0x19	; 25
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e a7       	std	Y+46, r25	; 0x2e
    1e6e:	8d a7       	std	Y+45, r24	; 0x2d
    1e70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_displayCharacter+0xd2>
    1e78:	9e a7       	std	Y+46, r25	; 0x2e
    1e7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	98 ab       	std	Y+48, r25	; 0x30
    1e84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e88:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <LCD_displayCharacter+0xc6>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	69 a9       	ldd	r22, Y+49	; 0x31
    1e92:	7a a9       	ldd	r23, Y+50	; 0x32
    1e94:	8b a9       	ldd	r24, Y+51	; 0x33
    1e96:	9c a9       	ldd	r25, Y+52	; 0x34
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	9c a7       	std	Y+44, r25	; 0x2c
    1eaa:	8b a7       	std	Y+43, r24	; 0x2b
    1eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_displayCharacter+0x10e>
    1eb4:	9c a7       	std	Y+44, r25	; 0x2c
    1eb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1eb8:	a2 e3       	ldi	r26, 0x32	; 50
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e2 e3       	ldi	r30, 0x32	; 50
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 64       	ori	r24, 0x40	; 64
    1ec4:	8c 93       	st	X, r24
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8f a3       	std	Y+39, r24	; 0x27
    1ed0:	98 a7       	std	Y+40, r25	; 0x28
    1ed2:	a9 a7       	std	Y+41, r26	; 0x29
    1ed4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eda:	89 a5       	ldd	r24, Y+41	; 0x29
    1edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8b a3       	std	Y+35, r24	; 0x23
    1ef0:	9c a3       	std	Y+36, r25	; 0x24
    1ef2:	ad a3       	std	Y+37, r26	; 0x25
    1ef4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    1efa:	8d a1       	ldd	r24, Y+37	; 0x25
    1efc:	9e a1       	ldd	r25, Y+38	; 0x26
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9a a3       	std	Y+34, r25	; 0x22
    1f14:	89 a3       	std	Y+33, r24	; 0x21
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6f a1       	ldd	r22, Y+39	; 0x27
    1f32:	78 a5       	ldd	r23, Y+40	; 0x28
    1f34:	89 a5       	ldd	r24, Y+41	; 0x29
    1f36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_displayCharacter+0x1d6>
    1f5a:	89 e1       	ldi	r24, 0x19	; 25
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	98 a3       	std	Y+32, r25	; 0x20
    1f60:	8f 8f       	std	Y+31, r24	; 0x1f
    1f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f64:	98 a1       	ldd	r25, Y+32	; 0x20
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_displayCharacter+0x1c4>
    1f6a:	98 a3       	std	Y+32, r25	; 0x20
    1f6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	9a a1       	ldd	r25, Y+34	; 0x22
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_displayCharacter+0x1b8>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6b a1       	ldd	r22, Y+35	; 0x23
    1f84:	7c a1       	ldd	r23, Y+36	; 0x24
    1f86:	8d a1       	ldd	r24, Y+37	; 0x25
    1f88:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9a a3       	std	Y+34, r25	; 0x22
    1f94:	89 a3       	std	Y+33, r24	; 0x21
    1f96:	89 a1       	ldd	r24, Y+33	; 0x21
    1f98:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_displayCharacter+0x200>
    1fa6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1faa:	e5 e3       	ldi	r30, 0x35	; 53
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb0:	80 83       	st	Z, r24
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	53 e4       	ldi	r21, 0x43	; 67
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
    1fdc:	9e 8b       	std	Y+22, r25	; 0x16
    1fde:	af 8b       	std	Y+23, r26	; 0x17
    1fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_displayCharacter+0x2c2>
    2046:	89 e1       	ldi	r24, 0x19	; 25
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	89 8b       	std	Y+17, r24	; 0x11
    204e:	89 89       	ldd	r24, Y+17	; 0x11
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_displayCharacter+0x2b0>
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_displayCharacter+0x2a4>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6d 89       	ldd	r22, Y+21	; 0x15
    2070:	7e 89       	ldd	r23, Y+22	; 0x16
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_displayCharacter+0x2ec>
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2096:	a2 e3       	ldi	r26, 0x32	; 50
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e2 e3       	ldi	r30, 0x32	; 50
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8f 7b       	andi	r24, 0xBF	; 191
    20a2:	8c 93       	st	X, r24
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	8b 87       	std	Y+11, r24	; 0x0b
    20ae:	9c 87       	std	Y+12, r25	; 0x0c
    20b0:	ad 87       	std	Y+13, r26	; 0x0d
    20b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	53 e4       	ldi	r21, 0x43	; 67
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8f 83       	std	Y+7, r24	; 0x07
    20ce:	98 87       	std	Y+8, r25	; 0x08
    20d0:	a9 87       	std	Y+9, r26	; 0x09
    20d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_displayCharacter+0x354>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    20f6:	6f 81       	ldd	r22, Y+7	; 0x07
    20f8:	78 85       	ldd	r23, Y+8	; 0x08
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_displayCharacter+0x3b4>
    2138:	89 e1       	ldi	r24, 0x19	; 25
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_displayCharacter+0x3a2>
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_displayCharacter+0x396>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_displayCharacter+0x3de>
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2188:	e9 96       	adiw	r28, 0x39	; 57
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <LCD_displayString+0x6>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9b 83       	std	Y+3, r25	; 0x03
    21a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	fc 01       	movw	r30, r24
    21ba:	e2 0f       	add	r30, r18
    21bc:	f3 1f       	adc	r31, r19
    21be:	80 81       	ld	r24, Z
    21c0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_displayCharacter>
		i++;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	fc 01       	movw	r30, r24
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	80 81       	ld	r24, Z
    21dc:	88 23       	and	r24, r24
    21de:	39 f7       	brne	.-50     	; 0x21ae <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LCD_goToRowColumn+0x6>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <LCD_goToRowColumn+0x8>
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	3d 83       	std	Y+5, r19	; 0x05
    2206:	2c 83       	std	Y+4, r18	; 0x04
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	91 05       	cpc	r25, r1
    2210:	c1 f0       	breq	.+48     	; 0x2242 <LCD_goToRowColumn+0x56>
    2212:	2c 81       	ldd	r18, Y+4	; 0x04
    2214:	3d 81       	ldd	r19, Y+5	; 0x05
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_goToRowColumn+0x3a>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	61 f0       	breq	.+24     	; 0x223c <LCD_goToRowColumn+0x50>
    2224:	19 c0       	rjmp	.+50     	; 0x2258 <LCD_goToRowColumn+0x6c>
    2226:	2c 81       	ldd	r18, Y+4	; 0x04
    2228:	3d 81       	ldd	r19, Y+5	; 0x05
    222a:	22 30       	cpi	r18, 0x02	; 2
    222c:	31 05       	cpc	r19, r1
    222e:	69 f0       	breq	.+26     	; 0x224a <LCD_goToRowColumn+0x5e>
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	83 30       	cpi	r24, 0x03	; 3
    2236:	91 05       	cpc	r25, r1
    2238:	61 f0       	breq	.+24     	; 0x2252 <LCD_goToRowColumn+0x66>
    223a:	0e c0       	rjmp	.+28     	; 0x2258 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	80 5c       	subi	r24, 0xC0	; 192
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	07 c0       	rjmp	.+14     	; 0x2258 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	80 5f       	subi	r24, 0xF0	; 240
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	80 5b       	subi	r24, 0xB0	; 176
    2256:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	80 68       	ori	r24, 0x80	; 128
    225c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_sendCommand>
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <LCD_displayStringRowColumn+0x6>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <LCD_displayStringRowColumn+0x8>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	6a 83       	std	Y+2, r22	; 0x02
    2280:	5c 83       	std	Y+4, r21	; 0x04
    2282:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	6a 81       	ldd	r22, Y+2	; 0x02
    2288:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	62 97       	sbiw	r28, 0x12	; 18
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	9a 8b       	std	Y+18, r25	; 0x12
    22b8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    22ba:	89 89       	ldd	r24, Y+17	; 0x11
    22bc:	9a 89       	ldd	r25, Y+18	; 0x12
    22be:	9e 01       	movw	r18, r28
    22c0:	2f 5f       	subi	r18, 0xFF	; 255
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	b9 01       	movw	r22, r18
    22c6:	4a e0       	ldi	r20, 0x0A	; 10
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <itoa>
   LCD_displayString(buff);
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_displayString>
}
    22d6:	62 96       	adiw	r28, 0x12	; 18
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_sendCommand>
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <__vector_19>:
	  		 		//}
	 //}
 //}
 /////////////////////////////////////////////////////////////////
 ISR(TIMER0_COMP_vect)
 {
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	2f 93       	push	r18
    2308:	3f 93       	push	r19
    230a:	4f 93       	push	r20
    230c:	5f 93       	push	r21
    230e:	6f 93       	push	r22
    2310:	7f 93       	push	r23
    2312:	8f 93       	push	r24
    2314:	9f 93       	push	r25
    2316:	af 93       	push	r26
    2318:	bf 93       	push	r27
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	 if(g_callBackPtr0 != NULL)
    2326:	80 91 f5 00 	lds	r24, 0x00F5
    232a:	90 91 f6 00 	lds	r25, 0x00F6
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	29 f0       	breq	.+10     	; 0x233c <__vector_19+0x40>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2332:	e0 91 f5 00 	lds	r30, 0x00F5
    2336:	f0 91 f6 00 	lds	r31, 0x00F6
    233a:	09 95       	icall
	  		 		}
 }
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <__vector_8>:
/////////////////////////////////////////////////////////////////
 ISR(TIMER1_OVF_vect)
 {
    2362:	1f 92       	push	r1
    2364:	0f 92       	push	r0
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	0f 92       	push	r0
    236a:	11 24       	eor	r1, r1
    236c:	2f 93       	push	r18
    236e:	3f 93       	push	r19
    2370:	4f 93       	push	r20
    2372:	5f 93       	push	r21
    2374:	6f 93       	push	r22
    2376:	7f 93       	push	r23
    2378:	8f 93       	push	r24
    237a:	9f 93       	push	r25
    237c:	af 93       	push	r26
    237e:	bf 93       	push	r27
    2380:	ef 93       	push	r30
    2382:	ff 93       	push	r31
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	 if(g_callBackPtr1 != NULL)
    238c:	80 91 f7 00 	lds	r24, 0x00F7
    2390:	90 91 f8 00 	lds	r25, 0x00F8
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	29 f0       	breq	.+10     	; 0x23a2 <__vector_8+0x40>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2398:	e0 91 f7 00 	lds	r30, 0x00F7
    239c:	f0 91 f8 00 	lds	r31, 0x00F8
    23a0:	09 95       	icall
	  		 		}
 }
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	ff 91       	pop	r31
    23a8:	ef 91       	pop	r30
    23aa:	bf 91       	pop	r27
    23ac:	af 91       	pop	r26
    23ae:	9f 91       	pop	r25
    23b0:	8f 91       	pop	r24
    23b2:	7f 91       	pop	r23
    23b4:	6f 91       	pop	r22
    23b6:	5f 91       	pop	r21
    23b8:	4f 91       	pop	r20
    23ba:	3f 91       	pop	r19
    23bc:	2f 91       	pop	r18
    23be:	0f 90       	pop	r0
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	0f 90       	pop	r0
    23c4:	1f 90       	pop	r1
    23c6:	18 95       	reti

000023c8 <__vector_6>:

///////////////////////////////////////////
ISR(TIMER1_COMPA_vect)
 {
    23c8:	1f 92       	push	r1
    23ca:	0f 92       	push	r0
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	0f 92       	push	r0
    23d0:	11 24       	eor	r1, r1
    23d2:	2f 93       	push	r18
    23d4:	3f 93       	push	r19
    23d6:	4f 93       	push	r20
    23d8:	5f 93       	push	r21
    23da:	6f 93       	push	r22
    23dc:	7f 93       	push	r23
    23de:	8f 93       	push	r24
    23e0:	9f 93       	push	r25
    23e2:	af 93       	push	r26
    23e4:	bf 93       	push	r27
    23e6:	ef 93       	push	r30
    23e8:	ff 93       	push	r31
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
 	flag++;
    23f2:	80 91 f9 00 	lds	r24, 0x00F9
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	80 93 f9 00 	sts	0x00F9, r24
 	 if(flag==7)
    23fc:	80 91 f9 00 	lds	r24, 0x00F9
    2400:	87 30       	cpi	r24, 0x07	; 7
    2402:	59 f4       	brne	.+22     	; 0x241a <__vector_6+0x52>
 	 {
 		 if(g_callBackPtr1 != NULL)
    2404:	80 91 f7 00 	lds	r24, 0x00F7
    2408:	90 91 f8 00 	lds	r25, 0x00F8
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	29 f0       	breq	.+10     	; 0x241a <__vector_6+0x52>
 		 		{
 		 			/* Call the Call Back function in the application after the edge is detected */
 		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2410:	e0 91 f7 00 	lds	r30, 0x00F7
    2414:	f0 91 f8 00 	lds	r31, 0x00F8
    2418:	09 95       	icall
 		 		}
 	 }
 }
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__vector_7>:


 //////////////////////////////////////////
 ISR (TIMER1_COMPB_vect)
 {flag2++;
    2440:	1f 92       	push	r1
    2442:	0f 92       	push	r0
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	0f 92       	push	r0
    2448:	11 24       	eor	r1, r1
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	4f 93       	push	r20
    2450:	5f 93       	push	r21
    2452:	6f 93       	push	r22
    2454:	7f 93       	push	r23
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25
    245a:	af 93       	push	r26
    245c:	bf 93       	push	r27
    245e:	ef 93       	push	r30
    2460:	ff 93       	push	r31
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	80 91 fa 00 	lds	r24, 0x00FA
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	80 93 fa 00 	sts	0x00FA, r24
	 if(flag2==2)
    2474:	80 91 fa 00 	lds	r24, 0x00FA
    2478:	82 30       	cpi	r24, 0x02	; 2
    247a:	59 f4       	brne	.+22     	; 0x2492 <__vector_7+0x52>
	 {
	  		 if(g_callBackPtr1 != NULL)
    247c:	80 91 f7 00 	lds	r24, 0x00F7
    2480:	90 91 f8 00 	lds	r25, 0x00F8
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	29 f0       	breq	.+10     	; 0x2492 <__vector_7+0x52>
	  		 		{
	  		 			/* Call the Call Back function in the application after the edge is detected */
	  		 			(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2488:	e0 91 f7 00 	lds	r30, 0x00F7
    248c:	f0 91 f8 00 	lds	r31, 0x00F8
    2490:	09 95       	icall
	  		 		}
	 }
 }
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	bf 91       	pop	r27
    249c:	af 91       	pop	r26
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	7f 91       	pop	r23
    24a4:	6f 91       	pop	r22
    24a6:	5f 91       	pop	r21
    24a8:	4f 91       	pop	r20
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	0f 90       	pop	r0
    24b4:	1f 90       	pop	r1
    24b6:	18 95       	reti

000024b8 <timer_init>:



 //////////////////////////////////////////////////
void timer_init (const TIMER_data *TIMER_DATA_Ptr)
{
    24b8:	0f 93       	push	r16
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <timer_init+0x8>
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
	SREG  |= (1<<7);
    24c8:	af e5       	ldi	r26, 0x5F	; 95
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	ef e5       	ldi	r30, 0x5F	; 95
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 68       	ori	r24, 0x80	; 128
    24d4:	8c 93       	st	X, r24
if ( TIMER_DATA_Ptr->TIMER_num==timer0)
    24d6:	e9 81       	ldd	r30, Y+1	; 0x01
    24d8:	fa 81       	ldd	r31, Y+2	; 0x02
    24da:	80 81       	ld	r24, Z
    24dc:	88 23       	and	r24, r24
    24de:	c9 f5       	brne	.+114    	; 0x2552 <timer_init+0x9a>
{
	if( TIMER_DATA_Ptr->TIMER_mode==compare)
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	81 81       	ldd	r24, Z+1	; 0x01
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	99 f4       	brne	.+38     	; 0x2510 <timer_init+0x58>
	{
		timer0_init_CTC_mode( TIMER_DATA_Ptr->TIMER_compareValue_a, TIMER_DATA_Ptr->initial_value, TIMER_DATA_Ptr->TIMER_prescaler);
    24ea:	e9 81       	ldd	r30, Y+1	; 0x01
    24ec:	fa 81       	ldd	r31, Y+2	; 0x02
    24ee:	86 81       	ldd	r24, Z+6	; 0x06
    24f0:	97 81       	ldd	r25, Z+7	; 0x07
    24f2:	38 2f       	mov	r19, r24
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	84 81       	ldd	r24, Z+4	; 0x04
    24fa:	95 81       	ldd	r25, Z+5	; 0x05
    24fc:	28 2f       	mov	r18, r24
    24fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2500:	fa 81       	ldd	r31, Y+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	83 2f       	mov	r24, r19
    2506:	62 2f       	mov	r22, r18
    2508:	49 2f       	mov	r20, r25
    250a:	0e 94 0b 13 	call	0x2616	; 0x2616 <timer0_init_CTC_mode>
    250e:	57 c0       	rjmp	.+174    	; 0x25be <timer_init+0x106>
	}
	else if ( TIMER_DATA_Ptr->TIMER_mode==normal)
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	81 81       	ldd	r24, Z+1	; 0x01
    2516:	88 23       	and	r24, r24
    2518:	59 f4       	brne	.+22     	; 0x2530 <timer_init+0x78>
	{
		timer0_init_normal_mode( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    251a:	e9 81       	ldd	r30, Y+1	; 0x01
    251c:	fa 81       	ldd	r31, Y+2	; 0x02
    251e:	84 81       	ldd	r24, Z+4	; 0x04
    2520:	95 81       	ldd	r25, Z+5	; 0x05
    2522:	e9 81       	ldd	r30, Y+1	; 0x01
    2524:	fa 81       	ldd	r31, Y+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	69 2f       	mov	r22, r25
    252a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer0_init_normal_mode>
    252e:	47 c0       	rjmp	.+142    	; 0x25be <timer_init+0x106>
	}
	else if( TIMER_DATA_Ptr->TIMER_mode==SquareWave)
    2530:	e9 81       	ldd	r30, Y+1	; 0x01
    2532:	fa 81       	ldd	r31, Y+2	; 0x02
    2534:	81 81       	ldd	r24, Z+1	; 0x01
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	09 f0       	breq	.+2      	; 0x253c <timer_init+0x84>
    253a:	41 c0       	rjmp	.+130    	; 0x25be <timer_init+0x106>
		{
		Timer0_CTC_Square_Wave_Init( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	84 81       	ldd	r24, Z+4	; 0x04
    2542:	95 81       	ldd	r25, Z+5	; 0x05
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	fa 81       	ldd	r31, Y+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	69 2f       	mov	r22, r25
    254c:	0e 94 34 13 	call	0x2668	; 0x2668 <Timer0_CTC_Square_Wave_Init>
    2550:	36 c0       	rjmp	.+108    	; 0x25be <timer_init+0x106>
		}
}
////////////////////////////////////////////////////////////
	else if ( TIMER_DATA_Ptr->TIMER_num==timer1)
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	80 81       	ld	r24, Z
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	89 f5       	brne	.+98     	; 0x25be <timer_init+0x106>
	{
		if( TIMER_DATA_Ptr->TIMER_mode==compare)
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	81 81       	ldd	r24, Z+1	; 0x01
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	e9 f4       	brne	.+58     	; 0x25a0 <timer_init+0xe8>
		{
			Timer1_init_compare_Mode( TIMER_DATA_Ptr->TIMER_compareValue_a, TIMER_DATA_Ptr->TIMER_compareValue_b, TIMER_DATA_Ptr->initial_value, TIMER_DATA_Ptr->channel, TIMER_DATA_Ptr->TIMER_prescaler);
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	86 81       	ldd	r24, Z+6	; 0x06
    256c:	97 81       	ldd	r25, Z+7	; 0x07
    256e:	48 2f       	mov	r20, r24
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	80 85       	ldd	r24, Z+8	; 0x08
    2576:	91 85       	ldd	r25, Z+9	; 0x09
    2578:	28 2f       	mov	r18, r24
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	84 81       	ldd	r24, Z+4	; 0x04
    2580:	95 81       	ldd	r25, Z+5	; 0x05
    2582:	38 2f       	mov	r19, r24
    2584:	e9 81       	ldd	r30, Y+1	; 0x01
    2586:	fa 81       	ldd	r31, Y+2	; 0x02
    2588:	52 81       	ldd	r21, Z+2	; 0x02
    258a:	e9 81       	ldd	r30, Y+1	; 0x01
    258c:	fa 81       	ldd	r31, Y+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	84 2f       	mov	r24, r20
    2592:	62 2f       	mov	r22, r18
    2594:	43 2f       	mov	r20, r19
    2596:	25 2f       	mov	r18, r21
    2598:	09 2f       	mov	r16, r25
    259a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Timer1_init_compare_Mode>
    259e:	0f c0       	rjmp	.+30     	; 0x25be <timer_init+0x106>

		}
		else if( TIMER_DATA_Ptr->TIMER_mode==normal)
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	81 81       	ldd	r24, Z+1	; 0x01
    25a6:	88 23       	and	r24, r24
    25a8:	51 f4       	brne	.+20     	; 0x25be <timer_init+0x106>
		{
			Timer1_init_Normal_Mode( TIMER_DATA_Ptr->initial_value,TIMER_DATA_Ptr->TIMER_prescaler);
    25aa:	e9 81       	ldd	r30, Y+1	; 0x01
    25ac:	fa 81       	ldd	r31, Y+2	; 0x02
    25ae:	84 81       	ldd	r24, Z+4	; 0x04
    25b0:	95 81       	ldd	r25, Z+5	; 0x05
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	69 2f       	mov	r22, r25
    25ba:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <Timer1_init_Normal_Mode>
//oca ocb double compare buffer Two Independent Output Compare Units
// Double Buffered Output Compare Registers
//Four Independent Interrupt Sources (TOV1, OCF1A, OCF1B, and ICF1)
//to the value stored in the OCR1A or ICR1 register.

}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	0f 91       	pop	r16
    25c8:	08 95       	ret

000025ca <timer0_init_normal_mode>:

void timer0_init_normal_mode(uint8 initial_value,uint8 prescaler)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <timer0_init_normal_mode+0x6>
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value; //Set Timer initial value to 0
    25d8:	e2 e5       	ldi	r30, 0x52	; 82
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    25e0:	a9 e5       	ldi	r26, 0x59	; 89
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e9 e5       	ldi	r30, 0x59	; 89
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	81 60       	ori	r24, 0x01	; 1
    25ec:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    25ee:	e3 e5       	ldi	r30, 0x53	; 83
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	85 e8       	ldi	r24, 0x85	; 133
    25f4:	80 83       	st	Z, r24
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    25f6:	a3 e5       	ldi	r26, 0x53	; 83
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e3 e5       	ldi	r30, 0x53	; 83
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	98 2f       	mov	r25, r24
    2602:	98 7f       	andi	r25, 0xF8	; 248
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	87 70       	andi	r24, 0x07	; 7
    2608:	89 2b       	or	r24, r25
    260a:	8c 93       	st	X, r24
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <timer0_init_CTC_mode>:



void timer0_init_CTC_mode(uint8 compare_value,uint8 initial_value,uint8 prescaler)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <timer0_init_CTC_mode+0x6>
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	6a 83       	std	Y+2, r22	; 0x02
    2626:	4b 83       	std	Y+3, r20	; 0x03
	TCNT0 = initial_value;    // Set Timer initial value to 0
    2628:	e2 e5       	ldi	r30, 0x52	; 82
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	80 83       	st	Z, r24
	OCR0  = compare_value; // Set Compare Value
    2630:	ec e5       	ldi	r30, 0x5C	; 92
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2638:	a9 e5       	ldi	r26, 0x59	; 89
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e9 e5       	ldi	r30, 0x59	; 89
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	82 60       	ori	r24, 0x02	; 2
    2644:	8c 93       	st	X, r24
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    2646:	a3 e5       	ldi	r26, 0x53	; 83
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e3 e5       	ldi	r30, 0x53	; 83
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	98 2f       	mov	r25, r24
    2652:	98 7f       	andi	r25, 0xF8	; 248
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	87 70       	andi	r24, 0x07	; 7
    2658:	89 2b       	or	r24, r25
    265a:	8c 93       	st	X, r24
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <Timer0_CTC_Square_Wave_Init>:


void Timer0_CTC_Square_Wave_Init(uint8 initial_value,uint8 prescaler)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <Timer0_CTC_Square_Wave_Init+0x6>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value;  // Set Initial Value to 0
    2676:	e2 e5       	ldi	r30, 0x52	; 82
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	80 83       	st	Z, r24
	OCR0 = 250; // Set Compare Value
    267e:	ec e5       	ldi	r30, 0x5C	; 92
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	8a ef       	ldi	r24, 0xFA	; 250
    2684:	80 83       	st	Z, r24
	DDRB = DDRB | (1<<PB3); // Configure PB3/OC0 Pin as output pin
    2686:	a7 e3       	ldi	r26, 0x37	; 55
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e7 e3       	ldi	r30, 0x37	; 55
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	88 60       	ori	r24, 0x08	; 8
    2692:	8c 93       	st	X, r24
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. Toggle OC0 on compare match COM00=1 & COM01=0
	 * 4. clock = CPU clock CS00=1 CS01=0 CS02=0
	 */
	//TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (1<<CS00);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    2694:	a3 e5       	ldi	r26, 0x53	; 83
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e3 e5       	ldi	r30, 0x53	; 83
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	98 2f       	mov	r25, r24
    26a0:	98 7f       	andi	r25, 0xF8	; 248
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	87 70       	andi	r24, 0x07	; 7
    26a6:	89 2b       	or	r24, r25
    26a8:	8c 93       	st	X, r24


}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <Timer1_init_Normal_Mode>:

void Timer1_init_Normal_Mode(uint8 initial_value,uint8 prescaler)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <Timer1_init_Normal_Mode+0x6>
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = initial_value; // Set Timer initial value to 0
    26c2:	e2 e5       	ldi	r30, 0x52	; 82
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	80 83       	st	Z, r24
	TIMSK = (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    26ca:	e9 e5       	ldi	r30, 0x59	; 89
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 83       	st	Z, r24
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
	 */
	//TCCR0 = (1<<FOC0) | (1<<CS02);
	TCCR0 = ((TCCR0 & 0xF8) | (prescaler & 0x7));
    26d2:	a3 e5       	ldi	r26, 0x53	; 83
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e3 e5       	ldi	r30, 0x53	; 83
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	98 2f       	mov	r25, r24
    26de:	98 7f       	andi	r25, 0xF8	; 248
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	87 70       	andi	r24, 0x07	; 7
    26e4:	89 2b       	or	r24, r25
    26e6:	8c 93       	st	X, r24
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <Timer1_init_compare_Mode>:
void Timer1_init_compare_Mode(uint8 compare_value_a,uint8 compare_value_b,uint8 initial_value,uint8 channel,uint8 prescaler)
{
    26f2:	0f 93       	push	r16
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <Timer1_init_compare_Mode+0x8>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Timer1_init_compare_Mode+0xa>
    26fc:	0f 92       	push	r0
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	6a 83       	std	Y+2, r22	; 0x02
    2706:	4b 83       	std	Y+3, r20	; 0x03
    2708:	2c 83       	std	Y+4, r18	; 0x04
    270a:	0d 83       	std	Y+5, r16	; 0x05
	TCNT1  =0;												//INITIAL VALUE
	//OCR1A  =976;											//TOP VALUE TO COMPARE WITH
	OCR1A=top_value;
	OCR1B=top_value2;*/
	///////////////////////////
	if ((channel) == 0)
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	88 23       	and	r24, r24
    2710:	71 f5       	brne	.+92     	; 0x276e <Timer1_init_compare_Mode+0x7c>
			{

				SET_BIT (TCCR1A,FOC1A);
    2712:	af e4       	ldi	r26, 0x4F	; 79
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ef e4       	ldi	r30, 0x4F	; 79
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	88 60       	ori	r24, 0x08	; 8
    271e:	8c 93       	st	X, r24


				SET_BIT (TCCR1B,WGM12);
    2720:	ae e4       	ldi	r26, 0x4E	; 78
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	ee e4       	ldi	r30, 0x4E	; 78
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	88 60       	ori	r24, 0x08	; 8
    272c:	8c 93       	st	X, r24

				TCCR1B = ((TCCR1B & 0xF8) | (prescaler & 0x7));
    272e:	ae e4       	ldi	r26, 0x4E	; 78
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ee e4       	ldi	r30, 0x4E	; 78
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	98 2f       	mov	r25, r24
    273a:	98 7f       	andi	r25, 0xF8	; 248
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	87 70       	andi	r24, 0x07	; 7
    2740:	89 2b       	or	r24, r25
    2742:	8c 93       	st	X, r24

				TCNT1 = initial_value;
    2744:	ec e4       	ldi	r30, 0x4C	; 76
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24

				OCR1A =compare_value_a;//78125//10sec//
    2752:	ea e4       	ldi	r30, 0x4A	; 74
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24

				SET_BIT (TIMSK,OCIE1A);
    2760:	a9 e5       	ldi	r26, 0x59	; 89
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e9 e5       	ldi	r30, 0x59	; 89
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 61       	ori	r24, 0x10	; 16
    276c:	8c 93       	st	X, r24
			}
			if ((channel) == 1)
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	71 f5       	brne	.+92     	; 0x27d0 <Timer1_init_compare_Mode+0xde>
			{
				SET_BIT (TCCR1A,FOC1B);
    2774:	af e4       	ldi	r26, 0x4F	; 79
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ef e4       	ldi	r30, 0x4F	; 79
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	84 60       	ori	r24, 0x04	; 4
    2780:	8c 93       	st	X, r24

				SET_BIT (TCCR1B,WGM12);
    2782:	ae e4       	ldi	r26, 0x4E	; 78
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	ee e4       	ldi	r30, 0x4E	; 78
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	88 60       	ori	r24, 0x08	; 8
    278e:	8c 93       	st	X, r24

				TCCR1B = ((TCCR1B & 0xF8) | (prescaler & 0x7));
    2790:	ae e4       	ldi	r26, 0x4E	; 78
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ee e4       	ldi	r30, 0x4E	; 78
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	98 2f       	mov	r25, r24
    279c:	98 7f       	andi	r25, 0xF8	; 248
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	87 70       	andi	r24, 0x07	; 7
    27a2:	89 2b       	or	r24, r25
    27a4:	8c 93       	st	X, r24

				TCNT1 =initial_value;
    27a6:	ec e4       	ldi	r30, 0x4C	; 76
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24

				OCR1B =compare_value_b;//1 min//468750
    27b4:	e8 e4       	ldi	r30, 0x48	; 72
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24

				SET_BIT (TIMSK,OCIE1B);
    27c2:	a9 e5       	ldi	r26, 0x59	; 89
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e9 e5       	ldi	r30, 0x59	; 89
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	88 60       	ori	r24, 0x08	; 8
    27ce:	8c 93       	st	X, r24
			}
}
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <TIMER0_setCallBack>:




void TIMER0_setCallBack(void(*a_ptr)(void))
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <TIMER0_setCallBack+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	90 93 f6 00 	sts	0x00F6, r25
    27f8:	80 93 f5 00 	sts	0x00F5, r24
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <TIMER1_setCallBack>:


void TIMER1_setCallBack(void(*a_ptr)(void))
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <TIMER1_setCallBack+0x6>
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	90 93 f8 00 	sts	0x00F8, r25
    281c:	80 93 f7 00 	sts	0x00F7, r24
}
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <TIMER0_stop>:




void TIMER0_stop (void)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2832:	e3 e5       	ldi	r30, 0x53	; 83
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	10 82       	st	Z, r1
	CLEAR_BIT (TIMSK,OCIE0);
    2838:	a9 e5       	ldi	r26, 0x59	; 89
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e9 e5       	ldi	r30, 0x59	; 89
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8d 7f       	andi	r24, 0xFD	; 253
    2844:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,TOIE0);
    2846:	a9 e5       	ldi	r26, 0x59	; 89
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 e5       	ldi	r30, 0x59	; 89
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8e 7f       	andi	r24, 0xFE	; 254
    2852:	8c 93       	st	X, r24
}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <TIMER1_stop>:
/////////////////////////////////////
void TIMER1_stop (void)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2862:	ef e4       	ldi	r30, 0x4F	; 79
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	10 82       	st	Z, r1
	TCCR1B = 0;
    2868:	ee e4       	ldi	r30, 0x4E	; 78
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	10 82       	st	Z, r1
	OCR1A = 0;
    286e:	ea e4       	ldi	r30, 0x4A	; 74
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	11 82       	std	Z+1, r1	; 0x01
    2874:	10 82       	st	Z, r1
	CLEAR_BIT (TIMSK,OCIE1A);
    2876:	a9 e5       	ldi	r26, 0x59	; 89
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e9 e5       	ldi	r30, 0x59	; 89
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	8f 7e       	andi	r24, 0xEF	; 239
    2882:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,TOIE1);
    2884:	a9 e5       	ldi	r26, 0x59	; 89
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e9 e5       	ldi	r30, 0x59	; 89
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8b 7f       	andi	r24, 0xFB	; 251
    2890:	8c 93       	st	X, r24
}
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28a0:	eb e2       	ldi	r30, 0x2B	; 43
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28a8:	ea e2       	ldi	r30, 0x2A	; 42
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	88 e1       	ldi	r24, 0x18	; 24
    28ae:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    28b0:	e0 e4       	ldi	r30, 0x40	; 64
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	86 e8       	ldi	r24, 0x86	; 134
    28b6:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    28b8:	e0 e4       	ldi	r30, 0x40	; 64
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    28be:	e9 e2       	ldi	r30, 0x29	; 41
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	8c e0       	ldi	r24, 0x0C	; 12
    28c4:	80 83       	st	Z, r24
}
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	0f 92       	push	r0
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28d8:	eb e2       	ldi	r30, 0x2B	; 43
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	80 72       	andi	r24, 0x20	; 32
    28e4:	90 70       	andi	r25, 0x00	; 0
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	b9 f3       	breq	.-18     	; 0x28d8 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    28ea:	ec e2       	ldi	r30, 0x2C	; 44
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2902:	eb e2       	ldi	r30, 0x2B	; 43
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	88 23       	and	r24, r24
    290a:	dc f7       	brge	.-10     	; 0x2902 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    290c:	ec e2       	ldi	r30, 0x2C	; 44
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
}
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <UART_sendString+0x6>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2928:	19 82       	std	Y+1, r1	; 0x01
    292a:	0e c0       	rjmp	.+28     	; 0x2948 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	fc 01       	movw	r30, r24
    2938:	e2 0f       	add	r30, r18
    293a:	f3 1f       	adc	r31, r19
    293c:	80 81       	ld	r24, Z
    293e:	0e 94 66 14 	call	0x28cc	; 0x28cc <UART_sendByte>
		i++;
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	8f 5f       	subi	r24, 0xFF	; 255
    2946:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	fc 01       	movw	r30, r24
    2954:	e2 0f       	add	r30, r18
    2956:	f3 1f       	adc	r31, r19
    2958:	80 81       	ld	r24, Z
    295a:	88 23       	and	r24, r24
    295c:	39 f7       	brne	.-50     	; 0x292c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <UART_receiveString+0xa>
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    297e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	8c 01       	movw	r16, r24
    298c:	02 0f       	add	r16, r18
    298e:	13 1f       	adc	r17, r19
    2990:	0e 94 7d 14 	call	0x28fa	; 0x28fa <UART_recieveByte>
    2994:	f8 01       	movw	r30, r16
    2996:	80 83       	st	Z, r24
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	8c 01       	movw	r16, r24
    29ac:	02 0f       	add	r16, r18
    29ae:	13 1f       	adc	r17, r19
    29b0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <UART_recieveByte>
    29b4:	f8 01       	movw	r30, r16
    29b6:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	9b 81       	ldd	r25, Y+3	; 0x03
    29c2:	fc 01       	movw	r30, r24
    29c4:	e2 0f       	add	r30, r18
    29c6:	f3 1f       	adc	r31, r19
    29c8:	80 81       	ld	r24, Z
    29ca:	83 32       	cpi	r24, 0x23	; 35
    29cc:	31 f7       	brne	.-52     	; 0x299a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	fc 01       	movw	r30, r24
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	10 82       	st	Z, r1
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	08 95       	ret

000029f0 <__prologue_saves__>:
    29f0:	2f 92       	push	r2
    29f2:	3f 92       	push	r3
    29f4:	4f 92       	push	r4
    29f6:	5f 92       	push	r5
    29f8:	6f 92       	push	r6
    29fa:	7f 92       	push	r7
    29fc:	8f 92       	push	r8
    29fe:	9f 92       	push	r9
    2a00:	af 92       	push	r10
    2a02:	bf 92       	push	r11
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	ca 1b       	sub	r28, r26
    2a1a:	db 0b       	sbc	r29, r27
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	09 94       	ijmp

00002a28 <__epilogue_restores__>:
    2a28:	2a 88       	ldd	r2, Y+18	; 0x12
    2a2a:	39 88       	ldd	r3, Y+17	; 0x11
    2a2c:	48 88       	ldd	r4, Y+16	; 0x10
    2a2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a3e:	df 80       	ldd	r13, Y+7	; 0x07
    2a40:	ee 80       	ldd	r14, Y+6	; 0x06
    2a42:	fd 80       	ldd	r15, Y+5	; 0x05
    2a44:	0c 81       	ldd	r16, Y+4	; 0x04
    2a46:	1b 81       	ldd	r17, Y+3	; 0x03
    2a48:	aa 81       	ldd	r26, Y+2	; 0x02
    2a4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a4c:	ce 0f       	add	r28, r30
    2a4e:	d1 1d       	adc	r29, r1
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	ed 01       	movw	r28, r26
    2a5c:	08 95       	ret

00002a5e <itoa>:
    2a5e:	fb 01       	movw	r30, r22
    2a60:	9f 01       	movw	r18, r30
    2a62:	e8 94       	clt
    2a64:	42 30       	cpi	r20, 0x02	; 2
    2a66:	c4 f0       	brlt	.+48     	; 0x2a98 <itoa+0x3a>
    2a68:	45 32       	cpi	r20, 0x25	; 37
    2a6a:	b4 f4       	brge	.+44     	; 0x2a98 <itoa+0x3a>
    2a6c:	4a 30       	cpi	r20, 0x0A	; 10
    2a6e:	29 f4       	brne	.+10     	; 0x2a7a <itoa+0x1c>
    2a70:	97 fb       	bst	r25, 7
    2a72:	1e f4       	brtc	.+6      	; 0x2a7a <itoa+0x1c>
    2a74:	90 95       	com	r25
    2a76:	81 95       	neg	r24
    2a78:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7a:	64 2f       	mov	r22, r20
    2a7c:	77 27       	eor	r23, r23
    2a7e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__udivmodhi4>
    2a82:	80 5d       	subi	r24, 0xD0	; 208
    2a84:	8a 33       	cpi	r24, 0x3A	; 58
    2a86:	0c f0       	brlt	.+2      	; 0x2a8a <itoa+0x2c>
    2a88:	89 5d       	subi	r24, 0xD9	; 217
    2a8a:	81 93       	st	Z+, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	a1 f7       	brne	.-24     	; 0x2a7a <itoa+0x1c>
    2a92:	16 f4       	brtc	.+4      	; 0x2a98 <itoa+0x3a>
    2a94:	5d e2       	ldi	r21, 0x2D	; 45
    2a96:	51 93       	st	Z+, r21
    2a98:	10 82       	st	Z, r1
    2a9a:	c9 01       	movw	r24, r18
    2a9c:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <strrev>

00002aa0 <strrev>:
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	67 2f       	mov	r22, r23
    2aa6:	71 91       	ld	r23, Z+
    2aa8:	77 23       	and	r23, r23
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <strrev+0x4>
    2aac:	32 97       	sbiw	r30, 0x02	; 2
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <strrev+0x18>
    2ab0:	7c 91       	ld	r23, X
    2ab2:	6d 93       	st	X+, r22
    2ab4:	70 83       	st	Z, r23
    2ab6:	62 91       	ld	r22, -Z
    2ab8:	ae 17       	cp	r26, r30
    2aba:	bf 07       	cpc	r27, r31
    2abc:	c8 f3       	brcs	.-14     	; 0x2ab0 <strrev+0x10>
    2abe:	08 95       	ret

00002ac0 <__udivmodhi4>:
    2ac0:	aa 1b       	sub	r26, r26
    2ac2:	bb 1b       	sub	r27, r27
    2ac4:	51 e1       	ldi	r21, 0x11	; 17
    2ac6:	07 c0       	rjmp	.+14     	; 0x2ad6 <__udivmodhi4_ep>

00002ac8 <__udivmodhi4_loop>:
    2ac8:	aa 1f       	adc	r26, r26
    2aca:	bb 1f       	adc	r27, r27
    2acc:	a6 17       	cp	r26, r22
    2ace:	b7 07       	cpc	r27, r23
    2ad0:	10 f0       	brcs	.+4      	; 0x2ad6 <__udivmodhi4_ep>
    2ad2:	a6 1b       	sub	r26, r22
    2ad4:	b7 0b       	sbc	r27, r23

00002ad6 <__udivmodhi4_ep>:
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	5a 95       	dec	r21
    2adc:	a9 f7       	brne	.-22     	; 0x2ac8 <__udivmodhi4_loop>
    2ade:	80 95       	com	r24
    2ae0:	90 95       	com	r25
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	08 95       	ret

00002ae8 <_exit>:
    2ae8:	f8 94       	cli

00002aea <__stop_program>:
    2aea:	ff cf       	rjmp	.-2      	; 0x2aea <__stop_program>
